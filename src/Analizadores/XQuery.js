/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var XQuery = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,5],$V2=[1,6],$V3=[5,7,13,18],$V4=[1,29],$V5=[1,27],$V6=[1,23],$V7=[1,20],$V8=[1,24],$V9=[1,21],$Va=[1,25],$Vb=[1,26],$Vc=[1,28],$Vd=[1,30],$Ve=[1,31],$Vf=[1,32],$Vg=[1,33],$Vh=[1,34],$Vi=[1,35],$Vj=[1,36],$Vk=[1,37],$Vl=[1,44],$Vm=[1,38],$Vn=[1,39],$Vo=[1,40],$Vp=[1,41],$Vq=[1,42],$Vr=[1,43],$Vs=[1,51],$Vt=[1,54],$Vu=[1,50],$Vv=[1,49],$Vw=[1,48],$Vx=[1,53],$Vy=[1,52],$Vz=[1,57],$VA=[1,56],$VB=[1,58],$VC=[1,55],$VD=[1,64],$VE=[1,63],$VF=[5,7,8,9,13,15,18,38,42,43,47,50,66,67,68,69,70,71,73,74,75,76,77,78,79,80,81,82,83,84],$VG=[1,77],$VH=[1,65],$VI=[1,66],$VJ=[1,67],$VK=[1,68],$VL=[1,69],$VM=[1,70],$VN=[1,71],$VO=[1,72],$VP=[1,73],$VQ=[1,74],$VR=[1,75],$VS=[1,76],$VT=[1,81],$VU=[1,82],$VV=[1,83],$VW=[5,7,8,9,13,15,18,38,40,42,43,47,50,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,73,74,75,76,77,78,79,80,81,82,83,84],$VX=[1,91],$VY=[16,44],$VZ=[1,109],$V_=[1,106],$V$=[1,104],$V01=[1,107],$V11=[1,105],$V21=[1,97],$V31=[1,98],$V41=[1,99],$V51=[1,100],$V61=[1,101],$V71=[1,102],$V81=[1,103],$V91=[1,108],$Va1=[5,7,8,13,16,18,23,34,37,38,39,40,42,44,53,54,55,56,57,58,59,60,61,62,63,64,65,88],$Vb1=[5,7,13,18,38,42],$Vc1=[1,167],$Vd1=[5,7,8,9,13,15,18,38,40,42,43,47,50,54,55,56,57,63,64,65,66,67,68,69,70,71,73,74,75,76,77,78,79,80,81,82,83,84],$Ve1=[5,7,8,9,13,15,18,38,40,42,43,47,50,54,55,56,57,58,59,63,64,65,66,67,68,69,70,71,73,74,75,76,77,78,79,80,81,82,83,84],$Vf1=[5,7,8,13,16,18,23,34,37,38,39,40,42,44,53,54,55,56,57,58,59,63,64,65,88],$Vg1=[5,7,8,13,16,18,23,34,37,38,39,40,42,44,53,54,55,56,57,63,64,65,88],$Vh1=[2,10],$Vi1=[1,181],$Vj1=[1,209],$Vk1=[1,210],$Vl1=[1,208],$Vm1=[1,207],$Vn1=[8,23,34,37,38,39];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"INSTRUCCIONES":4,"EOF":5,"SENTENCIAS":6,"FOR":7,"DOLAR":8,"ID":9,"IN":10,"PARAMETROS":11,"INSTRUCCIONESF":12,"LOCAL":13,"DOSPUNTOS":14,"PARA":15,"PARC":16,"lista_exp":17,"DECLARE":18,"FUNCTION":19,"TIPOF":20,"LLAVEA":21,"instrucciones":22,"LLAVEC":23,"PUNTOCOMA":24,"lista_expc":25,"AS":26,"XS":27,"INTERROG":28,"instruccion":29,"DECLARACION":30,"RETORNO":31,"ASIGNACION":32,"SENT_IF":33,"IF":34,"OPERADORES":35,"THEN":36,"ELSE":37,"RETURN":38,"LET":39,"IGUAL":40,"SENTENCIASF":41,"WHERE":42,"BARRA":43,"COMA":44,"valorcabeza":45,"SENT_ELSE":46,"DATA":47,"LISTA_PARAMETROS":48,"e":49,"BARRABARRA":50,"RESERV":51,"PUNTOPUNTO":52,"TO":53,"MENORQUE":54,"MAYORQUE":55,"MENORIGUAL":56,"MAYORIGUAL":57,"MAS":58,"MENOS":59,"POR":60,"DIV":61,"MODULO":62,"AND":63,"OR":64,"DIFERENTE":65,"ENTERO":66,"DECIMAL":67,"CADENA":68,"last":69,"POSITION":70,"ANCESTOR":71,"RESERVLARGE":72,"ATTRIBUTE":73,"ANCESORSELF":74,"CHILD":75,"DESCENDANT":76,"FOLLOWING":77,"SIBLING":78,"NAMESPACE":79,"PARENT":80,"PRECENDING":81,"SELF":82,"TEXT":83,"NODE":84,"ARROBA":85,"ASTERISCO":86,"CORA":87,"CORC":88,"LAST":89,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"FOR",8:"DOLAR",9:"ID",10:"IN",13:"LOCAL",14:"DOSPUNTOS",15:"PARA",16:"PARC",18:"DECLARE",19:"FUNCTION",21:"LLAVEA",23:"LLAVEC",24:"PUNTOCOMA",26:"AS",27:"XS",28:"INTERROG",34:"IF",36:"THEN",37:"ELSE",38:"RETURN",39:"LET",40:"IGUAL",42:"WHERE",43:"BARRA",44:"COMA",47:"DATA",50:"BARRABARRA",52:"PUNTOPUNTO",53:"TO",54:"MENORQUE",55:"MAYORQUE",56:"MENORIGUAL",57:"MAYORIGUAL",58:"MAS",59:"MENOS",60:"POR",61:"DIV",62:"MODULO",63:"AND",64:"OR",65:"DIFERENTE",66:"ENTERO",67:"DECIMAL",68:"CADENA",69:"last",70:"POSITION",71:"ANCESTOR",73:"ATTRIBUTE",74:"ANCESORSELF",75:"CHILD",76:"DESCENDANT",77:"FOLLOWING",78:"SIBLING",79:"NAMESPACE",80:"PARENT",81:"PRECENDING",82:"SELF",83:"TEXT",84:"NODE",85:"ARROBA",86:"ASTERISCO",87:"CORA",88:"CORC",89:"LAST"},
productions_: [0,[3,2],[4,2],[4,1],[6,6],[6,5],[6,6],[6,12],[6,13],[20,5],[20,0],[22,2],[22,1],[29,1],[29,1],[29,1],[29,1],[33,6],[33,8],[31,2],[30,6],[30,3],[32,5],[12,2],[12,1],[41,5],[41,5],[41,3],[17,3],[17,1],[25,3],[25,1],[45,7],[46,6],[46,2],[46,1],[11,2],[11,1],[48,2],[48,2],[48,3],[48,4],[48,2],[48,4],[48,5],[48,5],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,4],[48,3],[48,1],[48,1],[48,1],[48,1],[48,7],[48,6],[48,5],[51,1],[51,1],[51,2],[51,1],[51,1],[51,1],[51,2],[51,1],[51,3],[51,1],[51,1],[51,1],[51,1],[51,3],[51,1],[51,1],[51,1],[51,1],[72,4],[72,2],[49,1],[49,2],[49,2],[49,1],[49,4],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,2],[35,4],[35,3],[35,2],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
  this.$= new ast.default($$[$0-1]); return this.$ 
break;
case 2: case 11:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 3: case 24:
 this.$= new Array(); this.$.push($$[$0]); 
break;
case 4:
 this.$=new ForXquery.default($$[$0-3],$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column,$$[$0]); 
break;
case 5:
 this.$ = new llamada.default($$[$0-2] , [],_$[$0-4].first_line, _$[$0-4].last_column ); 
break;
case 6:
 this.$ = new llamada.default($$[$0-3] , $$[$0-1] ,_$[$0-5].first_line, _$[$0-5].last_column ); 
break;
case 7:
 this.$ = new funcion.default(3,new tipo.default('VOID'), $$[$0-7] , [], [], $$[$0-2], _$[$0-11].first_line, _$[$0-11].last_column ); 
break;
case 8:
 this.$ = new funcion.default(3,new tipo.default('VOID'), $$[$0-8] , $$[$0-6], $$[$0-6], $$[$0-2], _$[$0-12].first_line, _$[$0-12].last_column ); 
break;
case 12:
this.$= new Array(); this.$.push($$[$0]); 
break;
case 13: case 14: case 15:
this.$=$$[$0];
break;
case 16:
this.$=$$[$0]
break;
case 17:
 this.$ = new Ifs.default($$[$0-3], $$[$0], [], _$[$0-5].first_line, _$[$0-5].last_column); 
break;
case 18:
this.$ = new Ifs.default($$[$0-5], $$[$0-2], $$[$0], _$[$0-7].first_line, _$[$0-7].last_column);
break;
case 19:
this.$ = new Print.default($$[$0], _$[$0-1].first_line, _$[$0-1].last_column); 
break;
case 20:
this.$ = new declaracion.default(new tipo.default('LET'),new simbolo.default(1,null,$$[$0-3], $$[$0]), _$[$0-5].first_line, _$[$0-5].last_column);
break;
case 21:
this.$ = new declaracion.default(new tipo.default('LET'),new simbolo.default(1,null,$$[$0],null), _$[$0-2].first_line, _$[$0-2].last_column);
break;
case 22:
this.$ = new asignacion.default($$[$0-3] ,$$[$0], _$[$0-4].first_line, _$[$0-4].last_column);
break;
case 23:
this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 25:
this.$=new whereXquery.default($$[$0-2],$$[$0])
break;
case 26:
this.$= new returnXquery.default($$[$0-2],$$[$0])
break;
case 27:
this.$= new returnXquery.default($$[$0])
break;
case 28: case 30:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 29: case 31:
 this.$ = new Array(); this.$.push($$[$0]); 
break;
case 32:
 this.$=new simbolo.default(6,new tipo.default('LET'),$$[$0-5], null)
break;
case 36:
$$[$0-1].sig=$$[$0]; this.$ = $$[$0-1]; 
break;
case 37:
this.$= $$[$0]; 
break;
case 38:
  this.$ = new acceso.default($$[$0],null);
break;
case 39:
  this.$ = new barrabarra.default($$[$0],null);
break;
case 40: case 41:
  this.$ =  new axes.default($$[$0-2],$$[$0],null);
break;
case 42:
  this.$ =  new puntopunto.default($$[$0-1],null);
break;
case 43:
  this.$ =  new axesbarrabarra.default($$[$0-2],$$[$0],null)
break;
case 63:
  this.$ =  new acceso.default(new informacion.default($$[$0],null,1),null);
break;
case 68: case 69: case 71: case 72: case 73: case 75: case 77: case 78: case 79: case 80: case 82: case 83: case 84: case 85:
this.$ = $$[$0]
break;
case 70: case 74:
this.$ = $$[$0-1] + $$[$0]
break;
case 76: case 81:
this.$ = $$[$0-2]+$$[$0-1]+$$[$0]
break;
case 86:
this.$ = $$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0]
break;
case 87:
this.$ = $$[$0-1]+$$[$0]
break;
case 88: case 91:
this.$=new informacion.default($$[$0],null,1);
break;
case 89: case 90:
this.$=new informacion.default($$[$0],null,2);
break;
case 92:
this.$=new informacion.default($$[$0-3],$$[$0-1],1);
break;
case 93:
this.$ = new aritmetica.default($$[$0-2], '+', $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false);
break;
case 94:
this.$ = new aritmetica.default($$[$0-2], '-', $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false);
break;
case 95:
this.$ = new aritmetica.default($$[$0-2], '*', $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false);
break;
case 96:
this.$ = new aritmetica.default($$[$0-2], '/', $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false);
break;
case 97:
this.$ = new aritmetica.default($$[$0-2], '%', $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false);
break;
case 98:
this.$ = new logica.default($$[$0-2], '&&', $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false);
break;
case 99:
this.$ = new logica.default($$[$0-2], '||', $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false);
break;
case 100:
this.$ = new relacional.default($$[$0-2],'>', $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false);
break;
case 101:
this.$ = new relacional.default($$[$0-2],'>=', $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false);
break;
case 102:
this.$ = new relacional.default($$[$0-2],'<', $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false);
break;
case 103:
this.$ = new relacional.default($$[$0-2],'<=', $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false);
break;
case 104:
this.$ = new relacional.default($$[$0-2],'!=', $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false);
break;
case 105:
this.$ = new relacional.default($$[$0-2],'==', $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false);
break;
case 106:
this.$ = new aritmetica.default($$[$0], 'UNARIO', null, $$[$0-1].first_line, $$[$0-1].last_column, true);
break;
case 107:
this.$ = $$[$0-2];
break;
case 108:
this.$ = $$[$0-1];
break;
case 109:
this.$ = new identificador.default($$[$0] , _$[$0-1].first_line, _$[$0-1].last_column,1,2);
break;
case 110: case 111:
this.$ = new primitivo.default(Number(yytext), $$[$0].first_line, $$[$0].last_column,-1);
break;
case 112:
this.$ = new identificador.default($$[$0] , _$[$0].first_line, _$[$0].last_column,1,1); 
break;
case 113:
this.$ = new last.default();
break;
case 114:
this.$ = new position.default();
break;
case 115:
$$[$0] = $$[$0].slice(1, $$[$0].length-1); this.$ = new primitivo.default($$[$0], $$[$0].first_line, $$[$0].last_column);
break;
case 116:
this.$ = new identificador.default($$[$0] , _$[$0-1].first_line, _$[$0-1].last_column,2); 
break;
}
},
table: [{3:1,4:2,6:3,7:$V0,13:$V1,18:$V2},{1:[3]},{5:[1,7],6:8,7:$V0,13:$V1,18:$V2},o($V3,[2,3]),{8:[1,9]},{14:[1,10]},{19:[1,11]},{1:[2,1]},o($V3,[2,2]),{9:[1,12]},{9:[1,13]},{13:[1,14]},{10:[1,15]},{15:[1,16]},{14:[1,17]},{8:$V4,9:$V5,11:18,15:$V6,43:$V7,47:$V8,48:19,50:$V9,51:22,66:$Va,67:$Vb,68:$Vc,69:$Vd,70:$Ve,71:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr},{8:$Vs,9:$Vt,15:$Vu,16:[1,45],17:46,35:47,47:$Vv,59:$Vw,66:$Vx,67:$Vy,68:$Vz,70:$VA,85:$VB,89:$VC},{9:[1,59]},{8:$V4,9:$V5,12:60,15:$V6,38:$VD,41:62,42:$VE,43:$V7,47:$V8,48:61,50:$V9,51:22,66:$Va,67:$Vb,68:$Vc,69:$Vd,70:$Ve,71:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr},o($VF,[2,37],{40:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS}),{9:$VT,49:78,51:79,52:[1,80],69:$Vd,70:$Ve,71:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$VU,86:$VV},{9:$VT,49:84,51:85,69:$Vd,70:$Ve,71:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$VU,86:$VV},{14:[1,86]},{8:$Vs,9:$Vt,15:$Vu,35:87,47:$Vv,59:$Vw,66:$Vx,67:$Vy,68:$Vz,70:$VA,85:$VB,89:$VC},{15:[1,88]},o($VW,[2,61]),o($VW,[2,62]),o($VW,[2,63]),o($VW,[2,64]),{9:[1,89]},{14:[2,68]},{14:[2,69]},{59:$VX,72:90},{14:[2,71]},{14:[2,72]},{14:[2,73]},{14:[2,75],59:$VX,72:92},{14:[2,77],59:[1,93]},{14:[2,78]},{14:[2,79]},{14:[2,80],59:[1,94]},{14:[2,82]},{14:[2,83]},{14:[2,84]},{14:[2,85]},o($V3,[2,5]),{16:[1,95],44:[1,96]},o($VY,[2,29],{40:$VZ,54:$V_,55:$V$,56:$V01,57:$V11,58:$V21,59:$V31,60:$V41,61:$V51,62:$V61,63:$V71,64:$V81,65:$V91}),{8:$Vs,9:$Vt,15:$Vu,35:110,47:$Vv,59:$Vw,66:$Vx,67:$Vy,68:$Vz,70:$VA,85:$VB,89:$VC},{15:[1,111]},{8:$Vs,9:$Vt,15:$Vu,35:112,47:$Vv,59:$Vw,66:$Vx,67:$Vy,68:$Vz,70:$VA,85:$VB,89:$VC},{9:[1,113]},o($Va1,[2,110]),o($Va1,[2,111]),o($Va1,[2,112]),o($Va1,[2,113]),o($Va1,[2,114]),o($Va1,[2,115]),{9:[1,114]},{15:[1,115]},o($V3,[2,4],{41:116,38:$VD,42:$VE}),o($VF,[2,36],{40:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS}),o($Vb1,[2,24]),{8:[1,117]},{8:[1,118]},{8:$V4,9:$V5,15:$V6,43:$V7,47:$V8,48:119,50:$V9,51:22,66:$Va,67:$Vb,68:$Vc,69:$Vd,70:$Ve,71:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr},{8:$V4,9:$V5,15:$V6,43:$V7,47:$V8,48:120,50:$V9,51:22,66:$Va,67:$Vb,68:$Vc,69:$Vd,70:$Ve,71:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr},{8:$V4,9:$V5,15:$V6,43:$V7,47:$V8,48:121,50:$V9,51:22,66:$Va,67:$Vb,68:$Vc,69:$Vd,70:$Ve,71:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr},{8:$V4,9:$V5,15:$V6,43:$V7,47:$V8,48:122,50:$V9,51:22,66:$Va,67:$Vb,68:$Vc,69:$Vd,70:$Ve,71:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr},{8:$V4,9:$V5,15:$V6,43:$V7,47:$V8,48:123,50:$V9,51:22,66:$Va,67:$Vb,68:$Vc,69:$Vd,70:$Ve,71:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr},{8:$V4,9:$V5,15:$V6,43:$V7,47:$V8,48:124,50:$V9,51:22,66:$Va,67:$Vb,68:$Vc,69:$Vd,70:$Ve,71:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr},{8:$V4,9:$V5,15:$V6,43:$V7,47:$V8,48:125,50:$V9,51:22,66:$Va,67:$Vb,68:$Vc,69:$Vd,70:$Ve,71:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr},{8:$V4,9:$V5,15:$V6,43:$V7,47:$V8,48:126,50:$V9,51:22,66:$Va,67:$Vb,68:$Vc,69:$Vd,70:$Ve,71:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr},{8:$V4,9:$V5,15:$V6,43:$V7,47:$V8,48:127,50:$V9,51:22,66:$Va,67:$Vb,68:$Vc,69:$Vd,70:$Ve,71:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr},{8:$V4,9:$V5,15:$V6,43:$V7,47:$V8,48:128,50:$V9,51:22,66:$Va,67:$Vb,68:$Vc,69:$Vd,70:$Ve,71:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr},{8:$V4,9:$V5,15:$V6,43:$V7,47:$V8,48:129,50:$V9,51:22,66:$Va,67:$Vb,68:$Vc,69:$Vd,70:$Ve,71:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr},{8:$V4,9:$V5,15:$V6,43:$V7,47:$V8,48:130,50:$V9,51:22,66:$Va,67:$Vb,68:$Vc,69:$Vd,70:$Ve,71:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr},{8:$V4,9:$V5,15:$V6,43:$V7,47:$V8,48:131,50:$V9,51:22,66:$Va,67:$Vb,68:$Vc,69:$Vd,70:$Ve,71:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr},o($VW,[2,38]),{14:[1,132]},o($VW,[2,42]),o($VW,[2,88],{87:[1,133]}),{9:[1,134],86:[1,135]},o($VW,[2,91]),o($VW,[2,39]),{14:[1,136]},{9:$VT,49:137,85:$VU,86:$VV},{16:[1,140],40:$VZ,44:[1,139],53:[1,138],54:$V_,55:$V$,56:$V01,57:$V11,58:$V21,59:$V31,60:$V41,61:$V51,62:$V61,63:$V71,64:$V81,65:$V91},{8:$Vs,9:$Vt,15:$Vu,35:141,47:$Vv,59:$Vw,66:$Vx,67:$Vy,68:$Vz,70:$VA,85:$VB,89:$VC},{26:[1,142],44:[1,143]},{14:[2,70]},{64:[1,144],78:[1,145]},{14:[2,74]},{78:[1,146]},{78:[1,147]},o($V3,[2,6]),{8:$Vs,9:$Vt,15:$Vu,35:148,47:$Vv,59:$Vw,66:$Vx,67:$Vy,68:$Vz,70:$VA,85:$VB,89:$VC},{8:$Vs,9:$Vt,15:$Vu,35:149,47:$Vv,59:$Vw,66:$Vx,67:$Vy,68:$Vz,70:$VA,85:$VB,89:$VC},{8:$Vs,9:$Vt,15:$Vu,35:150,47:$Vv,59:$Vw,66:$Vx,67:$Vy,68:$Vz,70:$VA,85:$VB,89:$VC},{8:$Vs,9:$Vt,15:$Vu,35:151,47:$Vv,59:$Vw,66:$Vx,67:$Vy,68:$Vz,70:$VA,85:$VB,89:$VC},{8:$Vs,9:$Vt,15:$Vu,35:152,47:$Vv,59:$Vw,66:$Vx,67:$Vy,68:$Vz,70:$VA,85:$VB,89:$VC},{8:$Vs,9:$Vt,15:$Vu,35:153,47:$Vv,59:$Vw,66:$Vx,67:$Vy,68:$Vz,70:$VA,85:$VB,89:$VC},{8:$Vs,9:$Vt,15:$Vu,35:154,47:$Vv,59:$Vw,66:$Vx,67:$Vy,68:$Vz,70:$VA,85:$VB,89:$VC},{8:$Vs,9:$Vt,15:$Vu,35:155,47:$Vv,59:$Vw,66:$Vx,67:$Vy,68:$Vz,70:$VA,85:$VB,89:$VC},{8:$Vs,9:$Vt,15:$Vu,35:156,47:$Vv,59:$Vw,66:$Vx,67:$Vy,68:$Vz,70:$VA,85:$VB,89:$VC},{8:$Vs,9:$Vt,15:$Vu,35:157,47:$Vv,59:$Vw,66:$Vx,67:$Vy,68:$Vz,70:$VA,85:$VB,89:$VC},{8:$Vs,9:$Vt,15:$Vu,35:158,47:$Vv,59:$Vw,66:$Vx,67:$Vy,68:$Vz,70:$VA,85:$VB,89:$VC},{8:$Vs,9:$Vt,15:$Vu,35:159,47:$Vv,59:$Vw,66:$Vx,67:$Vy,68:$Vz,70:$VA,85:$VB,89:$VC},{8:$Vs,9:$Vt,15:$Vu,35:160,47:$Vv,59:$Vw,66:$Vx,67:$Vy,68:$Vz,70:$VA,85:$VB,89:$VC},{8:$Vs,9:$Vt,15:$Vu,35:161,47:$Vv,59:$Vw,66:$Vx,67:$Vy,68:$Vz,70:$VA,85:$VB,89:$VC},o($Va1,[2,106]),{8:$Vs,9:$Vt,15:$Vu,35:162,47:$Vv,59:$Vw,66:$Vx,67:$Vy,68:$Vz,70:$VA,85:$VB,89:$VC},{16:[1,163],40:$VZ,54:$V_,55:$V$,56:$V01,57:$V11,58:$V21,59:$V31,60:$V41,61:$V51,62:$V61,63:$V71,64:$V81,65:$V91},o($Va1,[2,109]),o($Va1,[2,116]),{8:$Vc1,16:[1,164],25:165,45:166},o($Vb1,[2,23]),{9:[1,168]},{9:[1,169]},o($Vd1,[2,46],{58:$VL,59:$VM,60:$VN,61:$VO,62:$VP}),o($Vd1,[2,47],{58:$VL,59:$VM,60:$VN,61:$VO,62:$VP}),o($Vd1,[2,48],{58:$VL,59:$VM,60:$VN,61:$VO,62:$VP}),o($Vd1,[2,49],{58:$VL,59:$VM,60:$VN,61:$VO,62:$VP}),o($Ve1,[2,50],{60:$VN,61:$VO,62:$VP}),o($Ve1,[2,51],{60:$VN,61:$VO,62:$VP}),o($VW,[2,52]),o($VW,[2,53]),o($VW,[2,54]),o([5,7,8,9,13,15,18,38,42,43,47,50,63,64,66,67,68,69,70,71,73,74,75,76,77,78,79,80,81,82,83,84],[2,55],{40:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,65:$VS}),o([5,7,8,9,13,15,18,38,42,43,47,50,64,66,67,68,69,70,71,73,74,75,76,77,78,79,80,81,82,83,84],[2,56],{40:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,65:$VS}),o($Vd1,[2,57],{58:$VL,59:$VM,60:$VN,61:$VO,62:$VP}),o($Vd1,[2,58],{58:$VL,59:$VM,60:$VN,61:$VO,62:$VP}),{9:$VT,49:170,85:$VU,86:$VV},{8:$Vs,9:$Vt,15:$Vu,35:171,47:$Vv,59:$Vw,66:$Vx,67:$Vy,68:$Vz,70:$VA,85:$VB,89:$VC},o($VW,[2,89]),o($VW,[2,90]),{9:$VT,49:172,85:$VU,86:$VV},o($VW,[2,40]),{8:$Vs,9:$Vt,15:$Vu,35:173,47:$Vv,59:$Vw,66:$Vx,67:$Vy,68:$Vz,70:$VA,85:$VB,89:$VC},{8:$Vs,9:$Vt,15:$Vu,35:174,47:$Vv,59:$Vw,66:$Vx,67:$Vy,68:$Vz,70:$VA,85:$VB,89:$VC},o($VW,[2,60]),{16:[1,175],40:$VZ,54:$V_,55:$V$,56:$V01,57:$V11,58:$V21,59:$V31,60:$V41,61:$V51,62:$V61,63:$V71,64:$V81,65:$V91},{9:[1,176]},{8:[1,177]},{59:[1,178]},{14:[2,87]},{14:[2,76]},{14:[2,81]},o($VY,[2,28],{40:$VZ,54:$V_,55:$V$,56:$V01,57:$V11,58:$V21,59:$V31,60:$V41,61:$V51,62:$V61,63:$V71,64:$V81,65:$V91}),o($Vf1,[2,93],{60:$V41,61:$V51,62:$V61}),o($Vf1,[2,94],{60:$V41,61:$V51,62:$V61}),o($Va1,[2,95]),o($Va1,[2,96]),o($Va1,[2,97]),o([5,7,8,13,16,18,23,34,37,38,39,42,44,53,63,64,88],[2,98],{40:$VZ,54:$V_,55:$V$,56:$V01,57:$V11,58:$V21,59:$V31,60:$V41,61:$V51,62:$V61,65:$V91}),o([5,7,8,13,16,18,23,34,37,38,39,42,44,53,64,88],[2,99],{40:$VZ,54:$V_,55:$V$,56:$V01,57:$V11,58:$V21,59:$V31,60:$V41,61:$V51,62:$V61,63:$V71,65:$V91}),o($Vg1,[2,100],{58:$V21,59:$V31,60:$V41,61:$V51,62:$V61}),o($Vg1,[2,101],{58:$V21,59:$V31,60:$V41,61:$V51,62:$V61}),o($Vg1,[2,102],{58:$V21,59:$V31,60:$V41,61:$V51,62:$V61}),o($Vg1,[2,103],{58:$V21,59:$V31,60:$V41,61:$V51,62:$V61}),o($Vg1,[2,104],{58:$V21,59:$V31,60:$V41,61:$V51,62:$V61}),o($Vg1,[2,105],{58:$V21,59:$V31,60:$V41,61:$V51,62:$V61}),{16:[1,179],40:$VZ,54:$V_,55:$V$,56:$V01,57:$V11,58:$V21,59:$V31,60:$V41,61:$V51,62:$V61,63:$V71,64:$V81,65:$V91},o($Va1,[2,108]),{20:180,21:$Vh1,26:$Vi1},{16:[1,182],44:[1,183]},o($VY,[2,31]),{9:[1,184]},{43:[1,185]},o($Vb1,[2,27],{43:[1,186]}),o($VW,[2,41]),{40:$VZ,54:$V_,55:$V$,56:$V01,57:$V11,58:$V21,59:$V31,60:$V41,61:$V51,62:$V61,63:$V71,64:$V81,65:$V91,88:[1,187]},o($VW,[2,43]),{16:[1,188],40:$VZ,54:$V_,55:$V$,56:$V01,57:$V11,58:$V21,59:$V31,60:$V41,61:$V51,62:$V61,63:$V71,64:$V81,65:$V91},{16:[1,189],40:$VZ,54:$V_,55:$V$,56:$V01,57:$V11,58:$V21,59:$V31,60:$V41,61:$V51,62:$V61,63:$V71,64:$V81,65:$V91},o($VW,[2,59]),{14:[1,190]},{9:[1,191]},{82:[1,192]},o($Va1,[2,107]),{21:[1,193]},{27:[1,194]},{20:195,21:$Vh1,26:$Vi1},{8:$Vc1,45:196},{26:[1,197]},{8:$Vs,9:$Vt,15:$Vu,35:198,47:$Vv,59:$Vw,66:$Vx,67:$Vy,68:$Vz,70:$VA,85:$VB,89:$VC},{8:$V4,9:$V5,11:199,15:$V6,43:$V7,47:$V8,48:19,50:$V9,51:22,66:$Va,67:$Vb,68:$Vc,69:$Vd,70:$Ve,71:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr},o($VW,[2,92]),o($VW,[2,44]),o($VW,[2,45]),{9:[1,200]},o($VW,[2,67]),{14:[2,86]},{8:$Vj1,22:201,29:202,30:203,31:204,32:205,33:206,34:$Vk1,38:$Vl1,39:$Vm1},{14:[1,211]},{21:[1,212]},o($VY,[2,30]),{27:[1,213]},o($Vb1,[2,25],{40:$VZ,54:$V_,55:$V$,56:$V01,57:$V11,58:$V21,59:$V31,60:$V41,61:$V51,62:$V61,63:$V71,64:$V81,65:$V91}),o($Vb1,[2,26],{51:22,48:61,8:$V4,9:$V5,15:$V6,43:$V7,47:$V8,50:$V9,66:$Va,67:$Vb,68:$Vc,69:$Vd,70:$Ve,71:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr}),o($VW,[2,66],{44:[1,214]}),{8:$Vj1,23:[1,215],29:216,30:203,31:204,32:205,33:206,34:$Vk1,38:$Vl1,39:$Vm1},o($Vn1,[2,12]),o($Vn1,[2,13]),o($Vn1,[2,14]),o($Vn1,[2,15]),o($Vn1,[2,16]),{8:[1,217]},{8:$Vs,9:$Vt,15:$Vu,35:218,47:$Vv,59:$Vw,66:$Vx,67:$Vy,68:$Vz,70:$VA,85:$VB,89:$VC},{9:[1,219]},{15:[1,220]},{9:[1,221]},{8:$Vj1,22:222,29:202,30:203,31:204,32:205,33:206,34:$Vk1,38:$Vl1,39:$Vm1},{14:[1,223]},o($VW,[2,65]),{24:[1,224]},o($Vn1,[2,11]),{9:[1,225]},o($Vn1,[2,19],{40:$VZ,54:$V_,55:$V$,56:$V01,57:$V11,58:$V21,59:$V31,60:$V41,61:$V51,62:$V61,63:$V71,64:$V81,65:$V91}),{14:[1,226]},{8:$Vs,9:$Vt,15:$Vu,35:227,47:$Vv,59:$Vw,66:$Vx,67:$Vy,68:$Vz,70:$VA,85:$VB,89:$VC},{28:[1,228]},{8:$Vj1,23:[1,229],29:216,30:203,31:204,32:205,33:206,34:$Vk1,38:$Vl1,39:$Vm1},{9:[1,230]},o($V3,[2,7]),o($Vn1,[2,21],{14:[1,231]}),{40:[1,232]},{16:[1,233],40:$VZ,54:$V_,55:$V$,56:$V01,57:$V11,58:$V21,59:$V31,60:$V41,61:$V51,62:$V61,63:$V71,64:$V81,65:$V91},{21:[2,9]},{24:[1,234]},{28:[1,235]},{40:[1,236]},{8:$Vs,9:$Vt,15:$Vu,35:237,47:$Vv,59:$Vw,66:$Vx,67:$Vy,68:$Vz,70:$VA,85:$VB,89:$VC},{36:[1,238]},o($V3,[2,8]),o($VY,[2,32]),{8:$Vs,9:$Vt,15:$Vu,35:239,47:$Vv,59:$Vw,66:$Vx,67:$Vy,68:$Vz,70:$VA,85:$VB,89:$VC},o($Vn1,[2,22],{40:$VZ,54:$V_,55:$V$,56:$V01,57:$V11,58:$V21,59:$V31,60:$V41,61:$V51,62:$V61,63:$V71,64:$V81,65:$V91}),{8:$Vj1,22:240,29:202,30:203,31:204,32:205,33:206,34:$Vk1,38:$Vl1,39:$Vm1},o($Vn1,[2,20],{40:$VZ,54:$V_,55:$V$,56:$V01,57:$V11,58:$V21,59:$V31,60:$V41,61:$V51,62:$V61,63:$V71,64:$V81,65:$V91}),{8:$Vj1,23:[2,17],29:216,30:203,31:204,32:205,33:206,34:$Vk1,37:[1,241],38:$Vl1,39:$Vm1},{8:$Vj1,22:242,29:202,30:203,31:204,32:205,33:206,34:$Vk1,38:$Vl1,39:$Vm1},o([23,37],[2,18],{30:203,31:204,32:205,33:206,29:216,8:$Vj1,34:$Vk1,38:$Vl1,39:$Vm1})],
defaultActions: {7:[2,1],30:[2,68],31:[2,69],33:[2,71],34:[2,72],35:[2,73],38:[2,78],39:[2,79],41:[2,82],42:[2,83],43:[2,84],44:[2,85],90:[2,70],92:[2,74],145:[2,87],146:[2,76],147:[2,81],192:[2,86],228:[2,9]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const evaluar = require('../Clases/Evaluar');
    const aritmetica= require('../Clases/Expreciones/Operaciones/Aritmetica');
    const relacional = require('../Clases/Expreciones/Operaciones/Relaciones');
    const logica = require('../Clases/Expreciones/Operaciones/Logicas');
    const primitivo = require('../Clases/Expreciones/Primitivo');
    
    const identificador= require('../Clases/Expreciones/Identificador');
    const last= require('../Clases/Expreciones/last');
    const position = require ('../Clases/Expreciones/position');
    const ternario= require('../Clases/Expreciones/Ternario');
    const ast =require('../Clases/AST/Ast');
    const declaracion = require ('../Clases/Instrucciones/Declaracion');
    const asignacion = require ('../Clases/Instrucciones/Asignacion');
    const funcion = require ('../Clases/Instrucciones/Funcion');
    const llamada = require ('../Clases/Instrucciones/Llamada');
    const ejecutar = require ('../Clases/Instrucciones/Ejecutar');
    const Print = require ('../Clases/Instrucciones/Print');
    const Ifs = require ('../Clases/Instrucciones/SentenciaControl/Ifs');
    const While = require ('../Clases/Instrucciones/SentenciaCiclos/While');
    const dowhile =require ('../Clases/Instrucciones/SentenciaCiclos/DoWhile');
    const For =require ('../Clases/Instrucciones/SentenciaCiclos/For');
    const simbolo= require ('../Clases/TablaSimbolos/Simbolos');
    const tipo= require ('../Clases/TablaSimbolos/Tipo');
    const detener = require ('../Clases/Instrucciones/SentenciaTransferencia/Break');
    const continuar = require ('../Clases/Instrucciones/SentenciaTransferencia/continuar');
    const retornar = require ('../Clases/Instrucciones/SentenciaTransferencia/retornar');
    const sw = require ('../Clases/Instrucciones/SentenciaControl/SW');
    const cs = require ('../Clases/Instrucciones/SentenciaControl/CS');
    const acceso= require ('../Clases/xpath/acceso');
    const barrabarra= require ('../Clases/xpath/barrabarra');
    const informacion = require ('../Clases/xpath/informacion');
    const axes = require ('../Clases/xpath/axes');
    const axesbarrabarra = require ('../Clases/xpath/axesbarrabarra');
    const instrucciondoble =require ('../Clases/xpath/intrucciondoble');
    const puntopunto =require ('../Clases/xpath/puntopunto');
    
    const ForXquery= require('../Clases/xquery/ForXquery');
    const whereXquery=require('../Clases/xquery/whereXquery');
    const returnXquery=require('../Clases/xquery/returnXquery');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: console.log("Reconocio : "+ yy_.yytext); return 15
break;
case 1: console.log("Reconocio : "+ yy_.yytext); return 50
break;
case 2: console.log("Reconocio : "+ yy_.yytext); return 43
break;
case 3: console.log("Reconocio : "+ yy_.yytext); return 16
break;
case 4: console.log("Reconocio : "+ yy_.yytext); return 8
break;
case 5: console.log("Reconocio : "+ yy_.yytext); return 21
break;
case 6: console.log("Reconocio : "+ yy_.yytext); return 23
break;
case 7: console.log("Reconocio : "+ yy_.yytext); return 87
break;
case 8: console.log("Reconocio : "+ yy_.yytext); return 88
break;
case 9: console.log("Reconocio : "+ yy_.yytext); return 52
break;
case 10: console.log("Reconocio : "+ yy_.yytext); return 'PUNTO'
break;
case 11: console.log("Reconocio : "+ yy_.yytext); return 'SIGNOO'
break;
case 12: console.log("Reconocio : "+ yy_.yytext); return 14
break;
case 13: console.log("Reconocio : "+ yy_.yytext); return 24
break;
case 14: console.log("Reconocio : "+ yy_.yytext); return 56
break;
case 15: console.log("Reconocio : "+ yy_.yytext); return 56
break;
case 16: console.log("Reconocio : "+ yy_.yytext); return 57
break;
case 17: console.log("Reconocio : "+ yy_.yytext); return 57
break;
case 18: console.log("Reconocio : "+ yy_.yytext); return 40
break;
case 19: console.log("Reconocio : "+ yy_.yytext); return 40
break;
case 20: console.log("Reconocio : "+ yy_.yytext); return 54
break;
case 21: console.log("Reconocio : "+ yy_.yytext); return 54
break;
case 22: console.log("Reconocio : "+ yy_.yytext); return 55
break;
case 23: console.log("Reconocio : "+ yy_.yytext); return 55
break;
case 24: console.log("Reconocio : "+ yy_.yytext); return 65
break;
case 25: console.log("Reconocio : "+ yy_.yytext); return 65
break;
case 26: console.log("Reconocio : "+ yy_.yytext); return 14
break;
case 27: console.log("Reconocio : "+ yy_.yytext); return 44
break;
case 28: console.log("Reconocio : "+ yy_.yytext); return 85
break;
case 29: console.log("Reconocio : "+ yy_.yytext); return 28
break;
case 30: console.log("Reconocio : "+ yy_.yytext); return 58
break;
case 31: console.log("Reconocio : "+ yy_.yytext); return 59
break;
case 32: console.log("Reconocio : "+ yy_.yytext); return 60
break;
case 33: console.log("Reconocio : "+ yy_.yytext); return 61
break;
case 34: console.log("Reconocio : "+ yy_.yytext); return 62
break;
case 35: console.log("Reconocio : "+ yy_.yytext); return 63
break;
case 36: console.log("Reconocio : "+ yy_.yytext); return 64
break;
case 37: console.log("Reconocio : "+ yy_.yytext); return 7
break;
case 38: console.log("Reconocio : "+ yy_.yytext); return 10
break;
case 39: console.log("Reconocio : "+ yy_.yytext); return 39
break;
case 40: console.log("Reconocio : "+ yy_.yytext); return 42
break;
case 41: console.log("Reconocio : "+ yy_.yytext); return 'ORDER'
break;
case 42: console.log("Reconocio : "+ yy_.yytext); return 38
break;
case 43: console.log("Reconocio : "+ yy_.yytext); return 53
break;
case 44: console.log("Reconocio : "+ yy_.yytext); return 34
break;
case 45: console.log("Reconocio : "+ yy_.yytext); return 36
break;
case 46: console.log("Reconocio : "+ yy_.yytext); return 37
break;
case 47: console.log("Reconocio : "+ yy_.yytext); return 18
break;
case 48: console.log("Reconocio : "+ yy_.yytext); return 19
break;
case 49: console.log("Reconocio : "+ yy_.yytext); return 26
break;
case 50: console.log("Reconocio : "+ yy_.yytext); return 39
break;
case 51: console.log("Reconocio : "+ yy_.yytext); return 47
break;
case 52: console.log("Reconocio : "+ yy_.yytext); return 89
break;
case 53: console.log("Reconocio : "+ yy_.yytext); return 70
break;
case 54: console.log("Reconocio : "+ yy_.yytext); return 71
break;
case 55: console.log("Reconocio : "+ yy_.yytext); return 73
break;
case 56: console.log("Reconocio : "+ yy_.yytext); return 82
break;
case 57: console.log("Reconocio : "+ yy_.yytext); return 75
break;
case 58: console.log("Reconocio : "+ yy_.yytext); return 76
break;
case 59: console.log("Reconocio : "+ yy_.yytext); return 77
break;
case 60: console.log("Reconocio : "+ yy_.yytext); return 78
break;
case 61: console.log("Reconocio : "+ yy_.yytext); return 79
break;
case 62: console.log("Reconocio : "+ yy_.yytext); return 80
break;
case 63: console.log("Reconocio : "+ yy_.yytext); return 81
break;
case 64: console.log("Reconocio : "+ yy_.yytext); return 83
break;
case 65: console.log("Reconocio : "+ yy_.yytext); return 84
break;
case 66: console.log("Reconocio : "+ yy_.yytext); return 89
break;
case 67: console.log("Reconocio : "+ yy_.yytext); return 70
break;
case 68: console.log("Reconocio : "+ yy_.yytext); return 13
break;
case 69: console.log("Reconocio : "+ yy_.yytext); return 27
break;
case 70: console.log("Reconocio : "+ yy_.yytext+" numero"); return 67
break;
case 71: console.log("Reconocio : "+ yy_.yytext); return 66
break;
case 72: console.log("Reconocio id : "+ yy_.yytext); return 9
break;
case 73: console.log("Reconocio : "+ yy_.yytext); return 68
break;
case 74: /* skip whitespace */ 
break;
case 75:return 5
break;
case 76: console.log("Error Lexico "+yy_.yytext
                        +" linea "+yy_.yylineno
                        +" columna "+(yyl
                        .last_column+1));        
                        
break;
}
},
rules: [/^(?:\()/i,/^(?:\/\/)/i,/^(?:\/)/i,/^(?:\))/i,/^(?:\$)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\.\.)/i,/^(?:\.)/i,/^(?:\|)/i,/^(?:::)/i,/^(?:;)/i,/^(?:<=)/i,/^(?:le\b)/i,/^(?:>=)/i,/^(?:ge\b)/i,/^(?:=)/i,/^(?:eq\b)/i,/^(?:<)/i,/^(?:lt\b)/i,/^(?:>)/i,/^(?:gt\b)/i,/^(?:!=)/i,/^(?:ne\b)/i,/^(?::)/i,/^(?:,)/i,/^(?:@)/i,/^(?:\?)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:div\b)/i,/^(?:mod\b)/i,/^(?:and\b)/i,/^(?:or\b)/i,/^(?:for\b)/i,/^(?:in\b)/i,/^(?:let\b)/i,/^(?:where\b)/i,/^(?:order by\b)/i,/^(?:return\b)/i,/^(?:to\b)/i,/^(?:if\b)/i,/^(?:then\b)/i,/^(?:else\b)/i,/^(?:declare\b)/i,/^(?:function\b)/i,/^(?:as\b)/i,/^(?:let\b)/i,/^(?:data\b)/i,/^(?:last\(\))/i,/^(?:position\(\))/i,/^(?:ancestor\b)/i,/^(?:attribute\b)/i,/^(?:self\b)/i,/^(?:child\b)/i,/^(?:descendant\b)/i,/^(?:following\b)/i,/^(?:sibling\b)/i,/^(?:namespace\b)/i,/^(?:parent\b)/i,/^(?:preceding\b)/i,/^(?:text\(\))/i,/^(?:node\(\))/i,/^(?:last\(\))/i,/^(?:position\(\))/i,/^(?:local\b)/i,/^(?:XS\b)/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:([0-9]+))/i,/^(?:([a-zñA-ZÑ_][a-zñA-ZÑ0-9_]*))/i,/^(?:(("((\\([\'\"\\ntr]))|([^\"\\]+))*")))/i,/^(?:[\s\r\n\t])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = XQuery;
exports.Parser = XQuery.Parser;
exports.parse = function () { return XQuery.parse.apply(XQuery, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}