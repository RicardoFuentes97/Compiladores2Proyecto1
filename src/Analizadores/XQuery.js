/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var XQuery = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,6],$V2=[1,7],$V3=[1,8],$V4=[1,9],$V5=[1,10],$V6=[1,11],$V7=[1,12],$V8=[1,13],$V9=[1,14],$Va=[5,7,32],$Vb=[5,7,9,14,15,16,19,22,24,26,28,30,32],$Vc=[1,47],$Vd=[1,50],$Ve=[1,46],$Vf=[1,45],$Vg=[1,44],$Vh=[1,49],$Vi=[1,48],$Vj=[1,53],$Vk=[1,52],$Vl=[1,54],$Vm=[1,51],$Vn=[1,74],$Vo=[1,72],$Vp=[1,68],$Vq=[1,69],$Vr=[1,65],$Vs=[1,66],$Vt=[1,70],$Vu=[1,71],$Vv=[1,73],$Vw=[1,75],$Vx=[1,76],$Vy=[1,77],$Vz=[1,78],$VA=[1,79],$VB=[1,80],$VC=[1,81],$VD=[1,82],$VE=[1,89],$VF=[1,83],$VG=[1,84],$VH=[1,85],$VI=[1,86],$VJ=[1,87],$VK=[1,88],$VL=[1,107],$VM=[1,104],$VN=[1,102],$VO=[1,105],$VP=[1,103],$VQ=[1,95],$VR=[1,96],$VS=[1,97],$VT=[1,98],$VU=[1,99],$VV=[1,100],$VW=[1,101],$VX=[1,106],$VY=[18,21,41,42,43,44,45,46,47,48,49,50,51,52,53,54,76],$VZ=[5,7,9,14,15,16,19,21,22,24,26,28,30,32],$V_=[1,133],$V$=[1,121],$V01=[1,122],$V11=[1,123],$V21=[1,124],$V31=[1,125],$V41=[1,126],$V51=[1,127],$V61=[1,128],$V71=[1,129],$V81=[1,130],$V91=[1,132],$Va1=[1,137],$Vb1=[1,139],$Vc1=[1,140],$Vd1=[1,141],$Ve1=[1,142],$Vf1=[1,138],$Vg1=[5,7,9,10,11,14,15,16,18,19,20,21,22,24,25,26,28,30,32,36,38,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,70,71,72,73],$Vh1=[1,150],$Vi1=[18,21,41,42,43,44,45,46,47,48,52,53,54,76],$Vj1=[18,21,41,42,43,44,45,46,52,53,54,76],$Vk1=[5,7,9,10,11,14,15,16,18,19,20,21,22,24,25,26,28,30,32,36,38,43,44,45,46,52,53,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,70,71,72,73],$Vl1=[5,7,9,10,11,14,15,16,18,19,20,21,22,24,25,26,28,30,32,36,38,43,44,45,46,47,48,52,53,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,70,71,72,73];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"VARIAS":4,"EOF":5,"INSTRUCCIONES":6,"SIGNOO":7,"SENTENCIAS":8,"FOR":9,"DOLAR":10,"ID":11,"IN":12,"PARAMETROS":13,"WHERE":14,"ORDER":15,"LET":16,"DOSPUNTOS":17,"IGUAL":18,"IF":19,"PARA":20,"PARC":21,"RETURN":22,"SENT_RETURN":23,"THEN":24,"DATA":25,"ELSE":26,"SENT_ELSE":27,"DECLARE":28,"FUNCTION":29,"AS":30,"LLAVEA":31,"LLAVEC":32,"OPERADORES":33,"CONCATENA":34,"LISTA_PARAMETROS":35,"BARRA":36,"e":37,"BARRABARRA":38,"RESERV":39,"PUNTOPUNTO":40,"TO":41,"COMA":42,"MENORQUE":43,"MAYORQUE":44,"MENORIGUAL":45,"MAYORIGUAL":46,"MAS":47,"MENOS":48,"POR":49,"DIV":50,"MODULO":51,"AND":52,"OR":53,"DIFERENTE":54,"ENTERO":55,"DECIMAL":56,"CADENA":57,"last":58,"POSITION":59,"ANCESTOR":60,"RESERVLARGE":61,"ATTRIBUTE":62,"ANCESORSELF":63,"CHILD":64,"DESCENDANT":65,"FOLLOWING":66,"SIBLING":67,"NAMESPACE":68,"PARENT":69,"PRECENDING":70,"SELF":71,"TEXT":72,"NODE":73,"ARROBA":74,"CORA":75,"CORC":76,"LAST":77,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"SIGNOO",9:"FOR",10:"DOLAR",11:"ID",12:"IN",14:"WHERE",15:"ORDER",16:"LET",17:"DOSPUNTOS",18:"IGUAL",19:"IF",20:"PARA",21:"PARC",22:"RETURN",24:"THEN",25:"DATA",26:"ELSE",28:"DECLARE",29:"FUNCTION",30:"AS",31:"LLAVEA",32:"LLAVEC",34:"CONCATENA",36:"BARRA",38:"BARRABARRA",40:"PUNTOPUNTO",41:"TO",42:"COMA",43:"MENORQUE",44:"MAYORQUE",45:"MENORIGUAL",46:"MAYORIGUAL",47:"MAS",48:"MENOS",49:"POR",50:"DIV",51:"MODULO",52:"AND",53:"OR",54:"DIFERENTE",55:"ENTERO",56:"DECIMAL",57:"CADENA",58:"last",59:"POSITION",60:"ANCESTOR",62:"ATTRIBUTE",63:"ANCESORSELF",64:"CHILD",65:"DESCENDANT",66:"FOLLOWING",67:"SIBLING",68:"NAMESPACE",69:"PARENT",70:"PRECENDING",71:"SELF",72:"TEXT",73:"NODE",74:"ARROBA",75:"CORA",76:"CORC",77:"LAST"},
productions_: [0,[3,2],[4,3],[4,1],[6,2],[6,1],[8,5],[8,4],[8,4],[8,6],[8,6],[8,2],[8,7],[8,2],[8,8],[8,7],[23,2],[23,3],[23,3],[23,6],[23,7],[23,1],[27,6],[27,2],[27,1],[13,2],[13,1],[35,2],[35,2],[35,3],[35,4],[35,2],[35,4],[35,5],[35,5],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,4],[35,3],[35,1],[35,1],[35,1],[35,1],[35,7],[35,6],[35,5],[39,1],[39,1],[39,2],[39,1],[39,1],[39,1],[39,2],[39,1],[39,3],[39,1],[39,1],[39,1],[39,1],[39,3],[39,1],[39,1],[39,1],[39,1],[61,4],[61,2],[37,1],[37,2],[37,2],[37,1],[37,4],[37,1],[37,1],[37,1],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,2],[33,4],[33,3],[33,2],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
  this.$=$$[$0-1]; return this.$ 
break;
case 2:
this.$=new instrucciondoble.default($$[$0-2],$$[$0]);
break;
case 3:
this.$=$$[$0]
break;
case 4: case 5: case 25: case 26:
  
break;
case 27:
  this.$ = new acceso.default($$[$0],null);
break;
case 28:
  this.$ = new barrabarra.default($$[$0],null);
break;
case 29: case 30:
  this.$ =  new axes.default($$[$0-2],$$[$0],null);
break;
case 31:
  this.$ =  new puntopunto.default($$[$0-1],null);
break;
case 32:
  this.$ =  new axesbarrabarra.default($$[$0-2],$$[$0],null)
break;
case 52:
  this.$ =  new acceso.default(new informacion.default($$[$0],null,1),null);
break;
case 57: case 58: case 60: case 61: case 62: case 64: case 66: case 67: case 68: case 69: case 71: case 72: case 73: case 74:
this.$ = $$[$0]
break;
case 59: case 63:
this.$ = $$[$0-1] + $$[$0]
break;
case 65: case 70:
this.$ = $$[$0-2]+$$[$0-1]+$$[$0]
break;
case 75:
this.$ = $$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0]
break;
case 76:
this.$ = $$[$0-1]+$$[$0]
break;
case 77: case 80: case 82: case 83: case 84:
this.$=new informacion.default($$[$0],null,1);
break;
case 78: case 79:
this.$=new informacion.default($$[$0],null,2);
break;
case 81:
this.$=new informacion.default($$[$0-3],null,1);
break;
case 85:
this.$ = new aritmetica.default($$[$0-2], '+', $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false);
break;
case 86:
this.$ = new aritmetica.default($$[$0-2], '-', $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false);
break;
case 87:
this.$ = new aritmetica.default($$[$0-2], '*', $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false);
break;
case 88:
this.$ = new aritmetica.default($$[$0-2], '/', $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false);
break;
case 89:
this.$ = new aritmetica.default($$[$0-2], '%', $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false);
break;
case 90:
this.$ = new logica.default($$[$0-2], '&&', $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false);
break;
case 91:
this.$ = new logica.default($$[$0-2], '||', $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false);
break;
case 92:
this.$ = new relacional.default($$[$0-2],'>', $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false);
break;
case 93:
this.$ = new relacional.default($$[$0-2],'>=', $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false);
break;
case 94:
this.$ = new relacional.default($$[$0-2],'<', $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false);
break;
case 95:
this.$ = new relacional.default($$[$0-2],'<=', $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false);
break;
case 96:
this.$ = new relacional.default($$[$0-2],'!=', $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false);
break;
case 97:
this.$ = new relacional.default($$[$0-2],'==', $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false);
break;
case 98:
this.$ = new aritmetica.default($$[$0], 'UNARIO', null, $$[$0-1].first_line, $$[$0-1].last_column, true);
break;
case 99:
this.$ = $$[$0-2];
break;
case 100:
this.$ = $$[$0-1];
break;
case 102: case 103:
this.$ = new primitivo.default(Number(yytext), $$[$0].first_line, $$[$0].last_column,-1);
break;
case 104:
this.$ = new identificador.default($$[$0] , _$[$0].first_line, _$[$0].last_column,1); 
break;
case 105:
this.$ = new last.default();
break;
case 106:
this.$ = new position.default();
break;
case 107:
$$[$0] = $$[$0].slice(1, $$[$0].length-1); this.$ = new primitivo.default($$[$0], $$[$0].first_line, $$[$0].last_column);
break;
case 108:
this.$ = new identificador.default($$[$0] , _$[$0-1].first_line, _$[$0-1].last_column,2); 
break;
}
},
table: [{3:1,4:2,6:3,8:4,9:$V0,14:$V1,15:$V2,16:$V3,19:$V4,22:$V5,24:$V6,26:$V7,28:$V8,30:$V9},{1:[3]},{5:[1,15]},{5:[2,3],7:[1,16]},o($Va,[2,5],{8:4,6:17,9:$V0,14:$V1,15:$V2,16:$V3,19:$V4,22:$V5,24:$V6,26:$V7,28:$V8,30:$V9}),{10:[1,18]},{10:[1,19]},{10:[1,20]},{10:[1,21]},{20:[1,22]},{8:28,9:$V0,10:[1,24],11:[1,26],14:$V1,15:$V2,16:$V3,19:$V4,20:[1,25],22:$V5,23:23,24:$V6,25:[1,27],26:$V7,28:$V8,30:$V9},{25:[1,29]},{8:33,9:$V0,14:$V1,15:$V2,16:$V3,19:$V4,20:[1,32],22:$V5,24:$V6,25:[1,31],26:$V7,27:30,28:$V8,30:$V9},{29:[1,34]},{11:[1,35]},{1:[2,1]},{6:36,8:4,9:$V0,14:$V1,15:$V2,16:$V3,19:$V4,22:$V5,24:$V6,26:$V7,28:$V8,30:$V9},o($Va,[2,4]),{11:[1,37]},{11:[1,38]},{11:[1,39]},{11:[1,40]},{10:[1,41]},o($Vb,[2,11]),{11:[1,42]},{10:$Vc,11:$Vd,20:$Ve,25:$Vf,33:43,48:$Vg,55:$Vh,56:$Vi,57:$Vj,59:$Vk,74:$Vl,77:$Vm},{17:[1,55]},{20:[1,56]},o($Vb,[2,21]),{20:[1,57]},o($Vb,[2,13]),{20:[1,58]},{21:[1,59]},o($Vb,[2,24]),{11:[1,60]},{17:[1,61]},{5:[2,2]},{12:[1,62]},{10:$Vn,11:$Vo,13:63,20:$Vp,25:$Vq,35:64,36:$Vr,38:$Vs,39:67,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK},{10:$Vn,11:$Vo,13:90,20:$Vp,25:$Vq,35:64,36:$Vr,38:$Vs,39:67,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK},{17:[1,91]},{11:[1,92]},o($Vb,[2,16],{35:64,39:67,13:93,10:$Vn,11:$Vo,20:$Vp,25:$Vq,36:$Vr,38:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK}),{18:$VL,21:[1,94],43:$VM,44:$VN,45:$VO,46:$VP,47:$VQ,48:$VR,49:$VS,50:$VT,51:$VU,52:$VV,53:$VW,54:$VX},{10:$Vc,11:$Vd,20:$Ve,25:$Vf,33:108,48:$Vg,55:$Vh,56:$Vi,57:$Vj,59:$Vk,74:$Vl,77:$Vm},{20:[1,109]},{10:$Vc,11:$Vd,20:$Ve,25:$Vf,33:110,48:$Vg,55:$Vh,56:$Vi,57:$Vj,59:$Vk,74:$Vl,77:$Vm},{11:[1,111]},o($VY,[2,102]),o($VY,[2,103]),o($VY,[2,104]),o($VY,[2,105]),o($VY,[2,106]),o($VY,[2,107]),{11:[1,112]},{11:[1,113]},{10:[1,114]},{10:[1,115]},{10:[1,116]},o($Vb,[2,23]),{17:[1,117]},{11:[1,118]},{10:$Vn,11:$Vo,13:119,20:$Vp,25:$Vq,35:64,36:$Vr,38:$Vs,39:67,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK},o($Vb,[2,7]),o($VZ,[2,26],{35:64,39:67,13:120,10:$Vn,11:$Vo,18:$V_,20:$Vp,25:$Vq,36:$Vr,38:$Vs,43:$V$,44:$V01,45:$V11,46:$V21,47:$V31,48:$V41,49:$V51,50:$V61,51:$V71,52:$V81,53:[1,131],54:$V91,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK}),{11:$Va1,37:134,39:135,40:[1,136],49:$Vb1,55:$Vc1,56:$Vd1,57:$Ve1,58:$Vw,59:$Vx,60:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$Vf1},{11:$Va1,37:143,39:144,49:$Vb1,55:$Vc1,56:$Vd1,57:$Ve1,58:$Vw,59:$Vx,60:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK,74:$Vf1},{17:[1,145]},{10:$Vc,11:$Vd,20:$Ve,25:$Vf,33:146,48:$Vg,55:$Vh,56:$Vi,57:$Vj,59:$Vk,74:$Vl,77:$Vm},{20:[1,147]},o($Vg1,[2,50]),o($Vg1,[2,51]),o($Vg1,[2,52]),o($Vg1,[2,53]),{11:[1,148]},{17:[2,57]},{17:[2,58]},{48:$Vh1,61:149},{17:[2,60]},{17:[2,61]},{17:[2,62]},{17:[2,64],48:$Vh1,61:151},{17:[2,66],48:[1,152]},{17:[2,67]},{17:[2,68]},{17:[2,69],48:[1,153]},{17:[2,71]},{17:[2,72]},{17:[2,73]},{17:[2,74]},o($Vb,[2,8]),{18:[1,154]},{10:$Vn,11:$Vo,13:155,20:$Vp,25:$Vq,35:64,36:$Vr,38:$Vs,39:67,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK},o($Vb,[2,17]),o($Vb,[2,18]),{10:$Vc,11:$Vd,20:$Ve,25:$Vf,33:156,48:$Vg,55:$Vh,56:$Vi,57:$Vj,59:$Vk,74:$Vl,77:$Vm},{10:$Vc,11:$Vd,20:$Ve,25:$Vf,33:157,48:$Vg,55:$Vh,56:$Vi,57:$Vj,59:$Vk,74:$Vl,77:$Vm},{10:$Vc,11:$Vd,20:$Ve,25:$Vf,33:158,48:$Vg,55:$Vh,56:$Vi,57:$Vj,59:$Vk,74:$Vl,77:$Vm},{10:$Vc,11:$Vd,20:$Ve,25:$Vf,33:159,48:$Vg,55:$Vh,56:$Vi,57:$Vj,59:$Vk,74:$Vl,77:$Vm},{10:$Vc,11:$Vd,20:$Ve,25:$Vf,33:160,48:$Vg,55:$Vh,56:$Vi,57:$Vj,59:$Vk,74:$Vl,77:$Vm},{10:$Vc,11:$Vd,20:$Ve,25:$Vf,33:161,48:$Vg,55:$Vh,56:$Vi,57:$Vj,59:$Vk,74:$Vl,77:$Vm},{10:$Vc,11:$Vd,20:$Ve,25:$Vf,33:162,48:$Vg,55:$Vh,56:$Vi,57:$Vj,59:$Vk,74:$Vl,77:$Vm},{10:$Vc,11:$Vd,20:$Ve,25:$Vf,33:163,48:$Vg,55:$Vh,56:$Vi,57:$Vj,59:$Vk,74:$Vl,77:$Vm},{10:$Vc,11:$Vd,20:$Ve,25:$Vf,33:164,48:$Vg,55:$Vh,56:$Vi,57:$Vj,59:$Vk,74:$Vl,77:$Vm},{10:$Vc,11:$Vd,20:$Ve,25:$Vf,33:165,48:$Vg,55:$Vh,56:$Vi,57:$Vj,59:$Vk,74:$Vl,77:$Vm},{10:$Vc,11:$Vd,20:$Ve,25:$Vf,33:166,48:$Vg,55:$Vh,56:$Vi,57:$Vj,59:$Vk,74:$Vl,77:$Vm},{10:$Vc,11:$Vd,20:$Ve,25:$Vf,33:167,48:$Vg,55:$Vh,56:$Vi,57:$Vj,59:$Vk,74:$Vl,77:$Vm},{10:$Vc,11:$Vd,20:$Ve,25:$Vf,33:168,48:$Vg,55:$Vh,56:$Vi,57:$Vj,59:$Vk,74:$Vl,77:$Vm},o($VY,[2,98]),{10:$Vc,11:$Vd,20:$Ve,25:$Vf,33:169,48:$Vg,55:$Vh,56:$Vi,57:$Vj,59:$Vk,74:$Vl,77:$Vm},{18:$VL,21:[1,170],43:$VM,44:$VN,45:$VO,46:$VP,47:$VQ,48:$VR,49:$VS,50:$VT,51:$VU,52:$VV,53:$VW,54:$VX},o($VY,[2,101]),o($VY,[2,108]),{20:[1,171]},{11:[1,172]},{11:[1,173]},{11:[1,174]},{11:[1,175]},{31:[1,176]},o($Vb,[2,6]),o($VZ,[2,25]),{10:$Vn,11:$Vo,20:$Vp,25:$Vq,35:177,36:$Vr,38:$Vs,39:67,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK},{10:$Vn,11:$Vo,20:$Vp,25:$Vq,35:178,36:$Vr,38:$Vs,39:67,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK},{10:$Vn,11:$Vo,20:$Vp,25:$Vq,35:179,36:$Vr,38:$Vs,39:67,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK},{10:$Vn,11:$Vo,20:$Vp,25:$Vq,35:180,36:$Vr,38:$Vs,39:67,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK},{10:$Vn,11:$Vo,20:$Vp,25:$Vq,35:181,36:$Vr,38:$Vs,39:67,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK},{10:$Vn,11:$Vo,20:$Vp,25:$Vq,35:182,36:$Vr,38:$Vs,39:67,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK},{10:$Vn,11:$Vo,20:$Vp,25:$Vq,35:183,36:$Vr,38:$Vs,39:67,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK},{10:$Vn,11:$Vo,20:$Vp,25:$Vq,35:184,36:$Vr,38:$Vs,39:67,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK},{10:$Vn,11:$Vo,20:$Vp,25:$Vq,35:185,36:$Vr,38:$Vs,39:67,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK},{10:$Vn,11:$Vo,20:$Vp,25:$Vq,35:186,36:$Vr,38:$Vs,39:67,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK},{10:$Vn,11:$Vo,20:$Vp,25:$Vq,35:187,36:$Vr,38:$Vs,39:67,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK},{10:$Vn,11:$Vo,20:$Vp,25:$Vq,35:188,36:$Vr,38:$Vs,39:67,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK},{10:$Vn,11:$Vo,20:$Vp,25:$Vq,35:189,36:$Vr,38:$Vs,39:67,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK},o($Vg1,[2,27]),{17:[1,190]},o($Vg1,[2,31]),o($Vg1,[2,77],{75:[1,191]}),{11:[1,192],49:[1,193]},o($Vg1,[2,80]),o($Vg1,[2,82]),o($Vg1,[2,83]),o($Vg1,[2,84]),o($Vg1,[2,28]),{17:[1,194]},{11:$Va1,37:195,49:$Vb1,55:$Vc1,56:$Vd1,57:$Ve1,74:$Vf1},{18:$VL,21:[1,198],41:[1,196],42:[1,197],43:$VM,44:$VN,45:$VO,46:$VP,47:$VQ,48:$VR,49:$VS,50:$VT,51:$VU,52:$VV,53:$VW,54:$VX},{10:$Vc,11:$Vd,20:$Ve,25:$Vf,33:199,48:$Vg,55:$Vh,56:$Vi,57:$Vj,59:$Vk,74:$Vl,77:$Vm},{30:[1,200],42:[1,201]},{17:[2,59]},{53:[1,202],67:[1,203]},{17:[2,63]},{67:[1,204]},{67:[1,205]},{10:$Vn,11:$Vo,13:206,20:$Vp,25:$Vq,35:64,36:$Vr,38:$Vs,39:67,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK},{21:[1,207]},o($Vi1,[2,85],{49:$VS,50:$VT,51:$VU}),o($Vi1,[2,86],{49:$VS,50:$VT,51:$VU}),o($VY,[2,87]),o($VY,[2,88]),o($VY,[2,89]),o([21,41,42,52,53,76],[2,90],{18:$VL,43:$VM,44:$VN,45:$VO,46:$VP,47:$VQ,48:$VR,49:$VS,50:$VT,51:$VU,54:$VX}),o([21,41,42,53,76],[2,91],{18:$VL,43:$VM,44:$VN,45:$VO,46:$VP,47:$VQ,48:$VR,49:$VS,50:$VT,51:$VU,52:$VV,54:$VX}),o($Vj1,[2,92],{47:$VQ,48:$VR,49:$VS,50:$VT,51:$VU}),o($Vj1,[2,93],{47:$VQ,48:$VR,49:$VS,50:$VT,51:$VU}),o($Vj1,[2,94],{47:$VQ,48:$VR,49:$VS,50:$VT,51:$VU}),o($Vj1,[2,95],{47:$VQ,48:$VR,49:$VS,50:$VT,51:$VU}),o($Vj1,[2,96],{47:$VQ,48:$VR,49:$VS,50:$VT,51:$VU}),o($Vj1,[2,97],{47:$VQ,48:$VR,49:$VS,50:$VT,51:$VU}),{18:$VL,21:[1,208],43:$VM,44:$VN,45:$VO,46:$VP,47:$VQ,48:$VR,49:$VS,50:$VT,51:$VU,52:$VV,53:$VW,54:$VX},o($VY,[2,100]),{10:$Vn,11:$Vo,13:209,20:$Vp,25:$Vq,35:64,36:$Vr,38:$Vs,39:67,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK},{10:$Vn,11:$Vo,13:210,20:$Vp,25:$Vq,35:64,36:$Vr,38:$Vs,39:67,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK},{10:$Vn,11:$Vo,13:211,20:$Vp,25:$Vq,35:64,36:$Vr,38:$Vs,39:67,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK},{10:$Vn,11:$Vo,13:212,20:$Vp,25:$Vq,35:64,36:$Vr,38:$Vs,39:67,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK},{20:[1,213]},{6:214,8:4,9:$V0,14:$V1,15:$V2,16:$V3,19:$V4,22:$V5,24:$V6,26:$V7,28:$V8,30:$V9},o($Vk1,[2,35],{47:$V31,48:$V41,49:$V51,50:$V61,51:$V71}),o($Vk1,[2,36],{47:$V31,48:$V41,49:$V51,50:$V61,51:$V71}),o($Vk1,[2,37],{47:$V31,48:$V41,49:$V51,50:$V61,51:$V71}),o($Vk1,[2,38],{47:$V31,48:$V41,49:$V51,50:$V61,51:$V71}),o($Vl1,[2,39],{49:$V51,50:$V61,51:$V71}),o($Vl1,[2,40],{49:$V51,50:$V61,51:$V71}),o($Vg1,[2,41]),o($Vg1,[2,42]),o($Vg1,[2,43]),o([5,7,9,10,11,14,15,16,19,20,21,22,24,25,26,28,30,32,36,38,52,53,55,56,57,58,59,60,62,63,64,65,66,67,68,69,70,71,72,73],[2,44],{18:$V_,43:$V$,44:$V01,45:$V11,46:$V21,47:$V31,48:$V41,49:$V51,50:$V61,51:$V71,54:$V91}),o([5,7,9,10,11,14,15,16,19,20,21,22,24,25,26,28,30,32,36,38,53,55,56,57,58,59,60,62,63,64,65,66,67,68,69,70,71,72,73],[2,45],{18:$V_,43:$V$,44:$V01,45:$V11,46:$V21,47:$V31,48:$V41,49:$V51,50:$V61,51:$V71,52:$V81,54:$V91}),o($Vk1,[2,46],{47:$V31,48:$V41,49:$V51,50:$V61,51:$V71}),o($Vk1,[2,47],{47:$V31,48:$V41,49:$V51,50:$V61,51:$V71}),{11:$Va1,37:215,49:$Vb1,55:$Vc1,56:$Vd1,57:$Ve1,74:$Vf1},{10:$Vc,11:$Vd,20:$Ve,25:$Vf,33:216,48:$Vg,55:$Vh,56:$Vi,57:$Vj,59:$Vk,74:$Vl,77:$Vm},o($Vg1,[2,78]),o($Vg1,[2,79]),{11:$Va1,37:217,49:$Vb1,55:$Vc1,56:$Vd1,57:$Ve1,74:$Vf1},o($Vg1,[2,29]),{10:$Vc,11:$Vd,20:$Ve,25:$Vf,33:218,48:$Vg,55:$Vh,56:$Vi,57:$Vj,59:$Vk,74:$Vl,77:$Vm},{10:$Vc,11:$Vd,20:$Ve,25:$Vf,33:219,48:$Vg,55:$Vh,56:$Vi,57:$Vj,59:$Vk,74:$Vl,77:$Vm},o($Vg1,[2,49]),{18:$VL,21:[1,220],43:$VM,44:$VN,45:$VO,46:$VP,47:$VQ,48:$VR,49:$VS,50:$VT,51:$VU,52:$VV,53:$VW,54:$VX},{11:[1,221]},{10:[1,222]},{48:[1,223]},{17:[2,76]},{17:[2,65]},{17:[2,70]},o($Vb,[2,9]),o($Vb,[2,10]),o($VY,[2,99]),{21:[1,224]},{21:[1,225]},{21:[1,226]},{21:[1,227]},{10:$Vn,11:$Vo,13:228,20:$Vp,25:$Vq,35:64,36:$Vr,38:$Vs,39:67,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,73:$VK},{32:[1,229]},o($Vg1,[2,30]),{18:$VL,43:$VM,44:$VN,45:$VO,46:$VP,47:$VQ,48:$VR,49:$VS,50:$VT,51:$VU,52:$VV,53:$VW,54:$VX,76:[1,230]},o($Vg1,[2,32]),{18:$VL,21:[1,231],43:$VM,44:$VN,45:$VO,46:$VP,47:$VQ,48:$VR,49:$VS,50:$VT,51:$VU,52:$VV,53:$VW,54:$VX},{18:$VL,21:[1,232],43:$VM,44:$VN,45:$VO,46:$VP,47:$VQ,48:$VR,49:$VS,50:$VT,51:$VU,52:$VV,53:$VW,54:$VX},o($Vg1,[2,48]),{17:[1,233]},{11:[1,234]},{71:[1,235]},o($Vb,[2,19]),{34:[1,236]},o($Vb,[2,12]),o($Vb,[2,22]),{21:[1,237]},o($Vb,[2,15]),o($Vg1,[2,81]),o($Vg1,[2,33]),o($Vg1,[2,34]),{11:[1,238]},o($Vg1,[2,56]),{17:[2,75]},o($Vb,[2,20]),o($Vb,[2,14]),o($Vg1,[2,55],{42:[1,239]}),o($Vg1,[2,54])],
defaultActions: {15:[2,1],36:[2,2],75:[2,57],76:[2,58],78:[2,60],79:[2,61],80:[2,62],83:[2,67],84:[2,68],86:[2,71],87:[2,72],88:[2,73],89:[2,74],149:[2,59],151:[2,63],203:[2,76],204:[2,65],205:[2,70],235:[2,75]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const evaluar = require('../Clases/Evaluar');
    const aritmetica= require('../Clases/Expreciones/Operaciones/Aritmetica');
    const relacional = require('../Clases/Expreciones/Operaciones/Relaciones');
    const logica = require('../Clases/Expreciones/Operaciones/Logicas');
    const primitivo = require('../Clases/Expreciones/Primitivo');
    
    const identificador= require('../Clases/Expreciones/Identificador');
    const last= require('../Clases/Expreciones/last');
    const position = require ('../Clases/Expreciones/position');
    const ternario= require('../Clases/Expreciones/Ternario');
    const ast =require('../Clases/AST/Ast');
    const declaracion = require ('../Clases/Instrucciones/Declaracion');
    const asignacion = require ('../Clases/Instrucciones/Asignacion');
    const funcion = require ('../Clases/Instrucciones/Funcion');
    const llamada = require ('../Clases/Instrucciones/Llamada');
    const ejecutar = require ('../Clases/Instrucciones/Ejecutar');
    const Print = require ('../Clases/Instrucciones/Print');
    const Ifs = require ('../Clases/Instrucciones/SentenciaControl/Ifs');
    const While = require ('../Clases/Instrucciones/SentenciaCiclos/While');
    const dowhile =require ('../Clases/Instrucciones/SentenciaCiclos/DoWhile');
    const For =require ('../Clases/Instrucciones/SentenciaCiclos/For');
    const simbolo= require ('../Clases/TablaSimbolos/Simbolos');
    const tipo= require ('../Clases/TablaSimbolos/Tipo');
    const detener = require ('../Clases/Instrucciones/SentenciaTransferencia/Break');
    const continuar = require ('../Clases/Instrucciones/SentenciaTransferencia/continuar');
    const retornar = require ('../Clases/Instrucciones/SentenciaTransferencia/retornar');
    const sw = require ('../Clases/Instrucciones/SentenciaControl/SW');
    const cs = require ('../Clases/Instrucciones/SentenciaControl/CS');
    const acceso= require ('../Clases/xpath/acceso');
    const barrabarra= require ('../Clases/xpath/barrabarra');
    const informacion = require ('../Clases/xpath/informacion');
    const axes = require ('../Clases/xpath/axes');
    const axesbarrabarra = require ('../Clases/xpath/axesbarrabarra');
    const instrucciondoble =require ('../Clases/xpath/intrucciondoble');
    const puntopunto =require ('../Clases/xpath/puntopunto');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: console.log("Reconocio : "+ yy_.yytext); return 20
break;
case 1: console.log("Reconocio : "+ yy_.yytext); return 38
break;
case 2: console.log("Reconocio : "+ yy_.yytext); return 36
break;
case 3: console.log("Reconocio : "+ yy_.yytext); return 21
break;
case 4: console.log("Reconocio : "+ yy_.yytext); return 10
break;
case 5: console.log("Reconocio : "+ yy_.yytext); return 31
break;
case 6: console.log("Reconocio : "+ yy_.yytext); return 32
break;
case 7: console.log("Reconocio : "+ yy_.yytext); return 75
break;
case 8: console.log("Reconocio : "+ yy_.yytext); return 76
break;
case 9: console.log("Reconocio : "+ yy_.yytext); return 40
break;
case 10: console.log("Reconocio : "+ yy_.yytext); return 'PUNTO'
break;
case 11: console.log("Reconocio : "+ yy_.yytext); return 7
break;
case 12: console.log("Reconocio : "+ yy_.yytext); return 17
break;
case 13: console.log("Reconocio : "+ yy_.yytext); return 45
break;
case 14: console.log("Reconocio : "+ yy_.yytext); return 46
break;
case 15: console.log("Reconocio : "+ yy_.yytext); return 18
break;
case 16: console.log("Reconocio : "+ yy_.yytext); return 43
break;
case 17: console.log("Reconocio : "+ yy_.yytext); return 44
break;
case 18: console.log("Reconocio : "+ yy_.yytext); return 54
break;
case 19: console.log("Reconocio : "+ yy_.yytext); return 17
break;
case 20: console.log("Reconocio : "+ yy_.yytext); return 42
break;
case 21: console.log("Reconocio : "+ yy_.yytext); return 74
break;
case 22: console.log("Reconocio : "+ yy_.yytext); return 47
break;
case 23: console.log("Reconocio : "+ yy_.yytext); return 48
break;
case 24: console.log("Reconocio : "+ yy_.yytext); return 49
break;
case 25: console.log("Reconocio : "+ yy_.yytext); return 50
break;
case 26: console.log("Reconocio : "+ yy_.yytext); return 51
break;
case 27: console.log("Reconocio : "+ yy_.yytext); return 52
break;
case 28: console.log("Reconocio : "+ yy_.yytext); return 53
break;
case 29: console.log("Reconocio : "+ yy_.yytext); return 9
break;
case 30: console.log("Reconocio : "+ yy_.yytext); return 12
break;
case 31: console.log("Reconocio : "+ yy_.yytext); return 16
break;
case 32: console.log("Reconocio : "+ yy_.yytext); return 14
break;
case 33: console.log("Reconocio : "+ yy_.yytext); return 15
break;
case 34: console.log("Reconocio : "+ yy_.yytext); return 22
break;
case 35: console.log("Reconocio : "+ yy_.yytext); return 41
break;
case 36: console.log("Reconocio : "+ yy_.yytext); return 19
break;
case 37: console.log("Reconocio : "+ yy_.yytext); return 24
break;
case 38: console.log("Reconocio : "+ yy_.yytext); return 26
break;
case 39: console.log("Reconocio : "+ yy_.yytext); return 28
break;
case 40: console.log("Reconocio : "+ yy_.yytext); return 29
break;
case 41: console.log("Reconocio : "+ yy_.yytext); return 30
break;
case 42: console.log("Reconocio : "+ yy_.yytext); return 16
break;
case 43: console.log("Reconocio : "+ yy_.yytext); return 25
break;
case 44: console.log("Reconocio : "+ yy_.yytext); return 77
break;
case 45: console.log("Reconocio : "+ yy_.yytext); return 59
break;
case 46: console.log("Reconocio : "+ yy_.yytext); return 60
break;
case 47: console.log("Reconocio : "+ yy_.yytext); return 62
break;
case 48: console.log("Reconocio : "+ yy_.yytext); return 71
break;
case 49: console.log("Reconocio : "+ yy_.yytext); return 64
break;
case 50: console.log("Reconocio : "+ yy_.yytext); return 65
break;
case 51: console.log("Reconocio : "+ yy_.yytext); return 66
break;
case 52: console.log("Reconocio : "+ yy_.yytext); return 67
break;
case 53: console.log("Reconocio : "+ yy_.yytext); return 68
break;
case 54: console.log("Reconocio : "+ yy_.yytext); return 69
break;
case 55: console.log("Reconocio : "+ yy_.yytext); return 70
break;
case 56: console.log("Reconocio : "+ yy_.yytext); return 72
break;
case 57: console.log("Reconocio : "+ yy_.yytext); return 73
break;
case 58: console.log("Reconocio : "+ yy_.yytext); return 77
break;
case 59: console.log("Reconocio : "+ yy_.yytext); return 59
break;
case 60: console.log("Reconocio : "+ yy_.yytext); return 56
break;
case 61: console.log("Reconocio : "+ yy_.yytext); return 55
break;
case 62: console.log("Reconocio id : "+ yy_.yytext); return 11
break;
case 63: console.log("Reconocio : "+ yy_.yytext); return 57
break;
case 64: /* skip whitespace */ 
break;
case 65:return 5
break;
case 66: console.log("Error Lexico "+yy_.yytext
                        +" linea "+yy_.yylineno
                        +" columna "+(yy_.yylloc.last_column+1));        
                        
break;
}
},
rules: [/^(?:\()/i,/^(?:\/\/)/i,/^(?:\/)/i,/^(?:\))/i,/^(?:\$)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\.\.)/i,/^(?:\.)/i,/^(?:\|)/i,/^(?:::)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!=)/i,/^(?::)/i,/^(?:,)/i,/^(?:@)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:div\b)/i,/^(?:mod\b)/i,/^(?:and\b)/i,/^(?:or\b)/i,/^(?:for\b)/i,/^(?:in\b)/i,/^(?:let\b)/i,/^(?:where\b)/i,/^(?:order by\b)/i,/^(?:return\b)/i,/^(?:to\b)/i,/^(?:if\b)/i,/^(?:then\b)/i,/^(?:else\b)/i,/^(?:declare\b)/i,/^(?:function\b)/i,/^(?:as\b)/i,/^(?:let\b)/i,/^(?:data\b)/i,/^(?:last\(\))/i,/^(?:position\(\))/i,/^(?:ancestor\b)/i,/^(?:attribute\b)/i,/^(?:self\b)/i,/^(?:child\b)/i,/^(?:descendant\b)/i,/^(?:following\b)/i,/^(?:sibling\b)/i,/^(?:namespace\b)/i,/^(?:parent\b)/i,/^(?:preceding\b)/i,/^(?:text\(\))/i,/^(?:node\(\))/i,/^(?:last\(\))/i,/^(?:position\(\))/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:([0-9]+))/i,/^(?:([a-zñA-ZÑ_][a-zñA-ZÑ0-9_]*))/i,/^(?:(("((\\([\'\"\\ntr]))|([^\"\\]+))*")))/i,/^(?:[\s\r\n\t])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = XQuery;
exports.Parser = XQuery.Parser;
exports.parse = function () { return XQuery.parse.apply(XQuery, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}