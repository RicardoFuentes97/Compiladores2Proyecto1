/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var XQuery = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,5],$V2=[1,6],$V3=[1,7],$V4=[1,8],$V5=[1,10],$V6=[1,11],$V7=[1,12],$V8=[1,13],$V9=[1,14],$Va=[5,7,11,15,16,17,25,29,30,31,33],$Vb=[1,21],$Vc=[1,18],$Vd=[1,20],$Ve=[1,25],$Vf=[1,24],$Vg=[1,19],$Vh=[1,22],$Vi=[1,23],$Vj=[1,46],$Vk=[1,42],$Vl=[1,44],$Vm=[1,39],$Vn=[1,38],$Vo=[1,40],$Vp=[1,41],$Vq=[1,43],$Vr=[1,45],$Vs=[1,47],$Vt=[5,7,9,11,12,13,15,16,17,18,19,20,22,23,25,26,28,29,30,31,33,35,39,44,45,46,48,49,50,51,52,53,54,55,56,57,58,59,60,62,63,64,65,66,67,69],$Vu=[1,53],$Vv=[1,60],$Vw=[1,57],$Vx=[1,78],$Vy=[1,61],$Vz=[1,58],$VA=[1,63],$VB=[1,64],$VC=[1,65],$VD=[1,66],$VE=[1,67],$VF=[1,68],$VG=[1,69],$VH=[1,70],$VI=[1,77],$VJ=[1,71],$VK=[1,72],$VL=[1,73],$VM=[1,74],$VN=[1,75],$VO=[1,76],$VP=[1,88],$VQ=[1,89],$VR=[1,86],$VS=[1,85],$VT=[1,87],$VU=[1,84],$VV=[5,7,11,15,16,17,19,22,23,25,26,29,30,31,33,35,39,44,45,46,48,49,50,51,52,54,55,56,57,58,59,60],$VW=[1,119],$VX=[11,17,19,22,23,28,33,35],$VY=[5,7,9,11,12,13,15,16,17,18,19,20,22,23,25,26,28,29,30,31,33,35,39,44,45,46,48,49,50,51,52,53,54,55,56,57,58,59,60,62,65,66,67,69],$VZ=[5,7,9,11,12,13,15,16,17,18,19,20,22,23,25,26,28,29,30,31,33,35,39,44,45,46,48,49,50,51,52,54,55,56,57,58,59,60,65,66,67,69];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"RAIZ":4,"EOF":5,"INSTRUCCION":6,"FOR":7,"E":8,"IN":9,"XPATH":10,"LET":11,"DOSPUNTOS":12,"IGUAL":13,"OP":14,"WHERE":15,"ORDER":16,"RETURN":17,"MENOR":18,"ID":19,"MAYOR":20,"LLAVEA":21,"LLAVEC":22,"BARRA":23,"SENTECIAS_CONTROL":24,"IF":25,"PARA":26,"PARAMETROS":27,"PARC":28,"THEN":29,"ELSE":30,"DECLARE":31,"FUNCTION":32,"AS":33,"LISTA_PARAMETROS":34,"DOLAR":35,"ARROBA":36,"COMA":37,"LISTA_XPATH":38,"BARRABARRA":39,"RESERV":40,"PUNTOPUNTO":41,"DECIMAL":42,"TO":43,"LAST":44,"POSITION":45,"ANCESTOR":46,"RESERVLARGE":47,"ATTRIBUTE":48,"ANCESORSELF":49,"CHILD":50,"DESCENDANT":51,"FOLLOWING":52,"MENOS":53,"SIBLING":54,"NAMESPACE":55,"PARENT":56,"PRECENDING":57,"SELF":58,"TEXT":59,"NODE":60,"OR":61,"MAS":62,"POR":63,"DIV":64,"MENOR_IGUAL":65,"MAYOR_IGUAL":66,"DIFERENTE":67,"CORA":68,"CORC":69,"CADENA":70,"ENTERO":71,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"FOR",9:"IN",11:"LET",12:"DOSPUNTOS",13:"IGUAL",15:"WHERE",16:"ORDER",17:"RETURN",18:"MENOR",19:"ID",20:"MAYOR",21:"LLAVEA",22:"LLAVEC",23:"BARRA",25:"IF",26:"PARA",28:"PARC",29:"THEN",30:"ELSE",31:"DECLARE",32:"FUNCTION",33:"AS",35:"DOLAR",36:"ARROBA",37:"COMA",39:"BARRABARRA",41:"PUNTOPUNTO",42:"DECIMAL",43:"TO",44:"LAST",45:"POSITION",46:"ANCESTOR",48:"ATTRIBUTE",49:"ANCESORSELF",50:"CHILD",51:"DESCENDANT",52:"FOLLOWING",53:"MENOS",54:"SIBLING",55:"NAMESPACE",56:"PARENT",57:"PRECENDING",58:"SELF",59:"TEXT",60:"NODE",61:"OR",62:"MAS",63:"POR",64:"DIV",65:"MENOR_IGUAL",66:"MAYOR_IGUAL",67:"DIFERENTE",68:"CORA",69:"CORC",70:"CADENA",71:"ENTERO"},
productions_: [0,[3,2],[4,2],[4,1],[6,4],[6,5],[6,3],[6,3],[6,3],[6,11],[6,2],[6,1],[24,4],[24,11],[24,11],[24,8],[24,7],[27,2],[27,1],[34,2],[34,2],[34,3],[34,3],[34,1],[34,5],[34,4],[34,4],[34,6],[34,2],[10,2],[10,1],[38,2],[38,2],[38,3],[38,4],[38,2],[38,3],[38,1],[38,2],[38,1],[14,5],[40,1],[40,1],[40,2],[40,1],[40,1],[40,1],[40,2],[40,1],[40,3],[40,1],[40,1],[40,1],[40,1],[40,3],[40,1],[40,1],[40,1],[40,1],[47,4],[47,2],[8,3],[8,3],[8,3],[8,3],[8,3],[8,3],[8,3],[8,3],[8,3],[8,3],[8,3],[8,3],[8,2],[8,4],[8,4],[8,1],[8,1],[8,1],[8,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
  this.$=$$[$0-1]; return this.$ 
break;
}
},
table: [{3:1,4:2,6:3,7:$V0,11:$V1,15:$V2,16:$V3,17:$V4,24:9,25:$V5,29:$V6,30:$V7,31:$V8,33:$V9},{1:[3]},{5:[1,15],6:16,7:$V0,11:$V1,15:$V2,16:$V3,17:$V4,24:9,25:$V5,29:$V6,30:$V7,31:$V8,33:$V9},o($Va,[2,3]),{8:17,19:$Vb,26:$Vc,35:$Vd,36:$Ve,42:$Vf,68:$Vg,70:$Vh,71:$Vi},{8:26,19:$Vb,26:$Vc,35:$Vd,36:$Ve,42:$Vf,68:$Vg,70:$Vh,71:$Vi},{8:27,19:$Vb,26:$Vc,35:$Vd,36:$Ve,42:$Vf,68:$Vg,70:$Vh,71:$Vi},{8:28,19:$Vb,26:$Vc,35:$Vd,36:$Ve,42:$Vf,68:$Vg,70:$Vh,71:$Vi},{8:29,18:[1,30],19:$Vb,24:31,25:$V5,26:$Vc,29:$V6,30:$V7,31:$V8,33:$V9,35:$Vd,36:$Ve,42:$Vf,68:$Vg,70:$Vh,71:$Vi},o($Va,[2,11]),{26:[1,32]},{18:[1,33]},{18:[1,34]},{32:[1,35]},{19:[1,36]},{1:[2,1]},o($Va,[2,2]),{9:[1,37],13:$Vj,18:$Vk,20:$Vl,53:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs},{8:48,19:$Vb,26:$Vc,35:$Vd,36:$Ve,42:$Vf,68:$Vg,70:$Vh,71:$Vi},{8:49,19:$Vb,26:$Vc,35:$Vd,36:$Ve,42:$Vf,68:$Vg,70:$Vh,71:$Vi},{19:[1,50]},{26:[1,51],68:[1,52]},o($Vt,[2,76]),o($Vt,[2,77]),o($Vt,[2,78]),{63:$Vu},{12:[1,54],13:$Vj,18:$Vk,20:$Vl,53:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs},{10:55,13:$Vj,14:62,18:$Vk,19:$Vv,20:$Vl,23:$Vw,26:$Vx,35:$Vy,38:56,39:$Vz,40:59,44:$VA,45:$VB,46:$VC,48:$VD,49:$VE,50:$VF,51:$VG,52:$VH,53:$Vm,54:$VI,55:$VJ,56:$VK,57:$VL,58:$VM,59:$VN,60:$VO,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs},{10:79,13:$Vj,14:62,18:$Vk,19:$Vv,20:$Vl,23:$Vw,26:$Vx,35:$Vy,38:56,39:$Vz,40:59,44:$VA,45:$VB,46:$VC,48:$VD,49:$VE,50:$VF,51:$VG,52:$VH,53:$Vm,54:$VI,55:$VJ,56:$VK,57:$VL,58:$VM,59:$VN,60:$VO,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs},{10:80,13:$Vj,14:62,18:$Vk,19:$Vv,20:$Vl,23:$Vw,26:$Vx,35:$Vy,38:56,39:$Vz,40:59,44:$VA,45:$VB,46:$VC,48:$VD,49:$VE,50:$VF,51:$VG,52:$VH,53:$Vm,54:$VI,55:$VJ,56:$VK,57:$VL,58:$VM,59:$VN,60:$VO,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs},{19:[1,81]},o($Va,[2,10]),{11:$VP,17:$VQ,19:$VR,23:$VS,27:82,33:$VT,34:83,35:$VU},{19:[1,90]},{19:[1,91]},{19:[1,92]},{12:[1,93]},{10:94,14:62,19:$Vv,23:$Vw,26:$Vx,35:$Vy,38:56,39:$Vz,40:59,44:$VA,45:$VB,46:$VC,48:$VD,49:$VE,50:$VF,51:$VG,52:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,58:$VM,59:$VN,60:$VO},{8:95,19:$Vb,26:$Vc,35:$Vd,36:$Ve,42:$Vf,68:$Vg,70:$Vh,71:$Vi},{8:96,19:$Vb,26:$Vc,35:$Vd,36:$Ve,42:$Vf,68:$Vg,70:$Vh,71:$Vi},{8:97,19:$Vb,26:$Vc,35:$Vd,36:$Ve,42:$Vf,68:$Vg,70:$Vh,71:$Vi},{8:98,19:$Vb,26:$Vc,35:$Vd,36:$Ve,42:$Vf,68:$Vg,70:$Vh,71:$Vi},{8:99,19:$Vb,26:$Vc,35:$Vd,36:$Ve,42:$Vf,68:$Vg,70:$Vh,71:$Vi},{8:100,19:$Vb,26:$Vc,35:$Vd,36:$Ve,42:$Vf,68:$Vg,70:$Vh,71:$Vi},{8:101,19:$Vb,26:$Vc,35:$Vd,36:$Ve,42:$Vf,68:$Vg,70:$Vh,71:$Vi},{8:102,19:$Vb,26:$Vc,35:$Vd,36:$Ve,42:$Vf,68:$Vg,70:$Vh,71:$Vi},{8:103,19:$Vb,26:$Vc,35:$Vd,36:$Ve,42:$Vf,68:$Vg,70:$Vh,71:$Vi},{8:104,19:$Vb,26:$Vc,35:$Vd,36:$Ve,42:$Vf,68:$Vg,70:$Vh,71:$Vi},{13:$Vj,18:$Vk,20:$Vl,28:[1,105],53:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs},{13:$Vj,18:$Vk,20:$Vl,53:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,69:[1,106]},o($Vt,[2,73]),{8:107,19:$Vb,26:$Vc,35:$Vd,36:$Ve,42:$Vf,68:$Vg,70:$Vh,71:$Vi},{8:108,19:$Vb,26:$Vc,35:$Vd,36:$Ve,42:$Vf,68:$Vg,70:$Vh,71:$Vi},o($Vt,[2,79]),{13:[1,109]},o($Va,[2,6],{40:59,14:62,38:110,19:$Vv,23:$Vw,26:$Vx,35:$Vy,39:$Vz,44:$VA,45:$VB,46:$VC,48:$VD,49:$VE,50:$VF,51:$VG,52:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,58:$VM,59:$VN,60:$VO}),o($VV,[2,30]),{8:111,19:$Vb,26:$Vc,35:$Vd,36:$Ve,40:112,41:[1,113],42:$Vf,44:$VA,45:$VB,46:$VC,48:$VD,49:$VE,50:$VF,51:$VG,52:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,58:$VM,59:$VN,60:$VO,68:$Vg,70:$Vh,71:$Vi},{8:114,19:$Vb,26:$Vc,35:$Vd,36:$Ve,40:115,42:$Vf,44:$VA,45:$VB,46:$VC,48:$VD,49:$VE,50:$VF,51:$VG,52:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,58:$VM,59:$VN,60:$VO,68:$Vg,70:$Vh,71:$Vi},{12:[1,116]},o($VV,[2,37]),{19:[1,117]},o($VV,[2,39]),{12:[2,41]},{12:[2,42]},{47:118,53:$VW},{12:[2,44]},{12:[2,45]},{12:[2,46]},{12:[2,48],47:120,53:$VW},{12:[2,50],53:[1,121]},{12:[2,51]},{12:[2,52]},{12:[2,53],53:[1,122]},{12:[2,55]},{12:[2,56]},{12:[2,57]},{12:[2,58]},{42:[1,123]},o($Va,[2,7],{40:59,14:62,38:110,19:$Vv,23:$Vw,26:$Vx,35:$Vy,39:$Vz,44:$VA,45:$VB,46:$VC,48:$VD,49:$VE,50:$VF,51:$VG,52:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,58:$VM,59:$VN,60:$VO}),o($Va,[2,8],{40:59,14:62,38:110,19:$Vv,23:$Vw,26:$Vx,35:$Vy,39:$Vz,44:$VA,45:$VB,46:$VC,48:$VD,49:$VE,50:$VF,51:$VG,52:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,58:$VM,59:$VN,60:$VO}),{20:[1,124]},{11:$VP,17:$VQ,19:$VR,23:$VS,28:[1,125],33:$VT,34:126,35:$VU},o($VX,[2,18]),{19:[1,127]},{8:128,19:$Vb,23:[1,129],26:$Vc,35:$Vd,36:[1,130],42:$Vf,68:$Vg,70:$Vh,71:$Vi},o($VX,[2,23],{26:[1,131]}),{19:[1,132]},{35:[1,133]},{8:134,19:$Vb,26:$Vc,35:$Vd,36:$Ve,42:$Vf,68:$Vg,70:$Vh,71:$Vi},{20:[1,135]},{20:[1,136]},{12:[1,137]},{19:[1,138]},o($Va,[2,4],{40:59,14:62,38:110,19:$Vv,23:$Vw,26:$Vx,35:$Vy,39:$Vz,44:$VA,45:$VB,46:$VC,48:$VD,49:$VE,50:$VF,51:$VG,52:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,58:$VM,59:$VN,60:$VO}),o($VY,[2,61],{63:$Vo,64:$Vp}),o($VY,[2,62],{63:$Vo,64:$Vp}),o($Vt,[2,63]),o($Vt,[2,64]),o($VZ,[2,65],{53:$Vm,62:$Vn,63:$Vo,64:$Vp}),o($VZ,[2,66],{53:$Vm,62:$Vn,63:$Vo,64:$Vp}),o($VZ,[2,67],{53:$Vm,62:$Vn,63:$Vo,64:$Vp}),o($VZ,[2,68],{53:$Vm,62:$Vn,63:$Vo,64:$Vp}),o($VZ,[2,69],{53:$Vm,62:$Vn,63:$Vo,64:$Vp}),o($VZ,[2,70],{53:$Vm,62:$Vn,63:$Vo,64:$Vp}),o($Vt,[2,71]),o($Vt,[2,72]),{13:$Vj,18:$Vk,20:$Vl,28:[1,139],53:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs},{13:$Vj,18:$Vk,20:$Vl,53:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,69:[1,140]},{14:141,26:$Vx},o($VV,[2,29]),o($VV,[2,31],{13:$Vj,18:$Vk,20:$Vl,53:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs}),{12:[1,142]},o($VV,[2,35]),o($VV,[2,32],{13:$Vj,18:$Vk,20:$Vl,53:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs}),{12:[1,143]},{8:144,19:$Vb,26:$Vc,35:$Vd,36:$Ve,42:$Vf,68:$Vg,70:$Vh,71:$Vi},o($VV,[2,38]),{12:[2,43]},{54:[1,146],61:[1,145]},{12:[2,47]},{54:[1,147]},{54:[1,148]},{43:[1,149]},{21:[1,150]},o($Va,[2,12]),o($VX,[2,17]),o($VX,[2,19]),o($VX,[2,20],{13:$Vj,18:$Vk,20:$Vl,53:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs}),{8:151,19:$Vb,26:$Vc,35:$Vd,36:$Ve,42:$Vf,68:$Vg,70:$Vh,71:$Vi},{8:152,19:$Vb,26:$Vc,35:$Vd,36:$Ve,42:$Vf,63:$Vu,68:$Vg,70:$Vh,71:$Vi},{11:$VP,17:$VQ,19:$VR,23:$VS,27:153,33:$VT,34:83,35:$VU},{12:[1,154]},{19:[1,155]},o($VX,[2,28],{13:$Vj,18:$Vk,20:$Vl,53:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs}),{21:[1,156]},{21:[1,157]},{19:[1,158]},{21:[1,159]},o($Vt,[2,74]),o($Vt,[2,75]),o($Va,[2,5]),{8:160,19:$Vb,26:$Vc,35:$Vd,36:$Ve,42:$Vf,68:$Vg,70:$Vh,71:$Vi},o($VV,[2,36]),o($VV,[2,33],{13:$Vj,18:$Vk,20:$Vl,53:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs}),{53:[1,161]},{12:[2,60]},{12:[2,49]},{12:[2,54]},{42:[1,162]},{10:163,14:62,19:$Vv,23:$Vw,26:$Vx,35:$Vy,38:56,39:$Vz,40:59,44:$VA,45:$VB,46:$VC,48:$VD,49:$VE,50:$VF,51:$VG,52:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,58:$VM,59:$VN,60:$VO},o($VX,[2,21],{13:$Vj,18:$Vk,20:$Vl,53:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs}),o($VX,[2,22],{13:$Vj,18:$Vk,20:$Vl,53:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs}),{11:$VP,17:$VQ,19:$VR,23:$VS,28:[1,164],33:$VT,34:126,35:$VU},{19:[1,165]},{12:[1,166]},{11:$VP,17:$VQ,19:$VR,23:$VS,27:167,33:$VT,34:83,35:$VU},{11:$VP,17:$VQ,19:$VR,23:$VS,27:168,33:$VT,34:83,35:$VU},{26:[1,169]},{11:$VP,17:$VQ,19:$VR,23:$VS,27:170,33:$VT,34:83,35:$VU},o($VV,[2,34],{13:$Vj,18:$Vk,20:$Vl,53:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs}),{58:[1,171]},{28:[1,172]},{14:62,19:$Vv,22:[1,173],23:$Vw,26:$Vx,35:$Vy,38:110,39:$Vz,40:59,44:$VA,45:$VB,46:$VC,48:$VD,49:$VE,50:$VF,51:$VG,52:$VH,54:$VI,55:$VJ,56:$VK,57:$VL,58:$VM,59:$VN,60:$VO},o($VX,[2,26]),o($VX,[2,25],{37:[1,174]}),{13:[1,175]},{11:$VP,17:$VQ,19:$VR,22:[1,176],23:$VS,33:$VT,34:126,35:$VU},{11:$VP,17:$VQ,19:$VR,22:[1,177],23:$VS,33:$VT,34:126,35:$VU},{11:$VP,17:$VQ,19:$VR,23:$VS,27:178,33:$VT,34:83,35:$VU},{11:$VP,17:$VQ,19:$VR,22:[1,179],23:$VS,33:$VT,34:126,35:$VU},{12:[2,59]},o($VV,[2,40]),{18:[1,180]},o($VX,[2,24]),{8:181,19:$Vb,26:$Vc,35:$Vd,36:$Ve,42:$Vf,68:$Vg,70:$Vh,71:$Vi},{18:[1,182]},{18:[1,183]},{11:$VP,17:$VQ,19:$VR,23:$VS,28:[1,184],33:$VT,34:126,35:$VU},o($Va,[2,16]),{23:[1,185]},o($VX,[2,27],{13:$Vj,18:$Vk,20:$Vl,53:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs}),{23:[1,186]},{23:[1,187]},o($Va,[2,15]),{19:[1,188]},{19:[1,189]},{19:[1,190]},{20:[1,191]},{20:[1,192]},{20:[1,193]},o($Va,[2,9]),o($Va,[2,13]),o($Va,[2,14])],
defaultActions: {15:[2,1],63:[2,41],64:[2,42],66:[2,44],67:[2,45],68:[2,46],71:[2,51],72:[2,52],74:[2,55],75:[2,56],76:[2,57],77:[2,58],118:[2,43],120:[2,47],146:[2,60],147:[2,49],148:[2,54],171:[2,59]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const evaluar = require('../Clases/Evaluar');
    const aritmetica= require('../Clases/Expreciones/Operaciones/Aritmetica');
    const relacional = require('../Clases/Expreciones/Operaciones/Relaciones');
    const logica = require('../Clases/Expreciones/Operaciones/Logicas');
    const primitivo = require('../Clases/Expreciones/Primitivo');
    
    const identificador= require('../Clases/Expreciones/Identificador');
    const last= require('../Clases/Expreciones/last');
    const position = require ('../Clases/Expreciones/position');
    const ternario= require('../Clases/Expreciones/Ternario');
    const ast =require('../Clases/AST/Ast');
    const declaracion = require ('../Clases/Instrucciones/Declaracion');
    const asignacion = require ('../Clases/Instrucciones/Asignacion');
    const funcion = require ('../Clases/Instrucciones/Funcion');
    const llamada = require ('../Clases/Instrucciones/Llamada');
    const ejecutar = require ('../Clases/Instrucciones/Ejecutar');
    const Print = require ('../Clases/Instrucciones/Print');
    const Ifs = require ('../Clases/Instrucciones/SentenciaControl/Ifs');
    const While = require ('../Clases/Instrucciones/SentenciaCiclos/While');
    const dowhile =require ('../Clases/Instrucciones/SentenciaCiclos/DoWhile');
    const For =require ('../Clases/Instrucciones/SentenciaCiclos/For');
    const simbolo= require ('../Clases/TablaSimbolos/Simbolos');
    const tipo= require ('../Clases/TablaSimbolos/Tipo');
    const detener = require ('../Clases/Instrucciones/SentenciaTransferencia/Break');
    const continuar = require ('../Clases/Instrucciones/SentenciaTransferencia/continuar');
    const retornar = require ('../Clases/Instrucciones/SentenciaTransferencia/retornar');
    const sw = require ('../Clases/Instrucciones/SentenciaControl/SW');
    const cs = require ('../Clases/Instrucciones/SentenciaControl/CS');
    const acceso= require ('../Clases/xpath/acceso');
    const barrabarra= require ('../Clases/xpath/barrabarra');
    const informacion = require ('../Clases/xpath/informacion');
    const axes = require ('../Clases/xpath/axes');
    const axesbarrabarra = require ('../Clases/xpath/axesbarrabarra');
    const instrucciondoble =require ('../Clases/xpath/intrucciondoble');
    const puntopunto =require ('../Clases/xpath/puntopunto');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: console.log("Reconocio : "+ yy_.yytext); return 26
break;
case 1: console.log("Reconocio : "+ yy_.yytext); return 39
break;
case 2: console.log("Reconocio : "+ yy_.yytext); return 23
break;
case 3: console.log("Reconocio : "+ yy_.yytext); return 28
break;
case 4: console.log("Reconocio : "+ yy_.yytext); return 35
break;
case 5: console.log("Reconocio : "+ yy_.yytext); return 21
break;
case 6: console.log("Reconocio : "+ yy_.yytext); return 22
break;
case 7: console.log("Reconocio : "+ yy_.yytext); return 68
break;
case 8: console.log("Reconocio : "+ yy_.yytext); return 69
break;
case 9: console.log("Reconocio : "+ yy_.yytext); return 65
break;
case 10: console.log("Reconocio : "+ yy_.yytext); return 66
break;
case 11: console.log("Reconocio : "+ yy_.yytext); return 13
break;
case 12: console.log("Reconocio : "+ yy_.yytext); return 18
break;
case 13: console.log("Reconocio : "+ yy_.yytext); return 20
break;
case 14: console.log("Reconocio : "+ yy_.yytext); return 67
break;
case 15: console.log("Reconocio : "+ yy_.yytext); return 12
break;
case 16: console.log("Reconocio : "+ yy_.yytext); return 37
break;
case 17: console.log("Reconocio : "+ yy_.yytext); return 62
break;
case 18: console.log("Reconocio : "+ yy_.yytext); return 53
break;
case 19: console.log("Reconocio : "+ yy_.yytext); return 63
break;
case 20: console.log("Reconocio : "+ yy_.yytext); return 64
break;
case 21: console.log("Reconocio : "+ yy_.yytext); return 36
break;
case 22: console.log("Reconocio : "+ yy_.yytext); return 'AND'
break;
case 23: console.log("Reconocio : "+ yy_.yytext); return 61
break;
case 24: console.log("Reconocio : "+ yy_.yytext); return 7
break;
case 25: console.log("Reconocio : "+ yy_.yytext); return 9
break;
case 26: console.log("Reconocio : "+ yy_.yytext); return 11
break;
case 27: console.log("Reconocio : "+ yy_.yytext); return 15
break;
case 28: console.log("Reconocio : "+ yy_.yytext); return 16
break;
case 29: console.log("Reconocio : "+ yy_.yytext); return 17
break;
case 30: console.log("Reconocio : "+ yy_.yytext); return 43
break;
case 31: console.log("Reconocio : "+ yy_.yytext); return 25
break;
case 32: console.log("Reconocio : "+ yy_.yytext); return 29
break;
case 33: console.log("Reconocio : "+ yy_.yytext); return 30
break;
case 34: console.log("Reconocio : "+ yy_.yytext); return 31
break;
case 35: console.log("Reconocio : "+ yy_.yytext); return 32
break;
case 36: console.log("Reconocio : "+ yy_.yytext); return 33
break;
case 37: console.log("Reconocio : "+ yy_.yytext); return 11
break;
case 38: console.log("Reconocio : "+ yy_.yytext); return 44
break;
case 39: console.log("Reconocio : "+ yy_.yytext); return 45
break;
case 40: console.log("Reconocio : "+ yy_.yytext); return 46
break;
case 41: console.log("Reconocio : "+ yy_.yytext); return 48
break;
case 42: console.log("Reconocio : "+ yy_.yytext); return 58
break;
case 43: console.log("Reconocio : "+ yy_.yytext); return 50
break;
case 44: console.log("Reconocio : "+ yy_.yytext); return 51
break;
case 45: console.log("Reconocio : "+ yy_.yytext); return 52
break;
case 46: console.log("Reconocio : "+ yy_.yytext); return 54
break;
case 47: console.log("Reconocio : "+ yy_.yytext); return 55
break;
case 48: console.log("Reconocio : "+ yy_.yytext); return 56
break;
case 49: console.log("Reconocio : "+ yy_.yytext); return 57
break;
case 50: console.log("Reconocio : "+ yy_.yytext); return 59
break;
case 51: console.log("Reconocio : "+ yy_.yytext); return 60
break;
case 52: console.log("Reconocio : "+ yy_.yytext); return 44
break;
case 53: console.log("Reconocio : "+ yy_.yytext); return 45
break;
case 54: console.log("Reconocio : "+ yy_.yytext); return 42
break;
case 55: console.log("Reconocio : "+ yy_.yytext); return 71
break;
case 56: console.log("Reconocio id : "+ yy_.yytext); return 19
break;
case 57: console.log("Reconocio : "+ yy_.yytext); return 70
break;
case 58: /* skip whitespace */ 
break;
case 59:return 5
break;
case 60: console.log("Error Lexico "+yy_.yytext
                        +" linea "+yy_.yylineno
                        +" columna "+(yy_.yylloc.last_column+1));        
                        
break;
}
},
rules: [/^(?:\()/i,/^(?:\/\/)/i,/^(?:\/)/i,/^(?:\))/i,/^(?:\$)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!=)/i,/^(?::)/i,/^(?:,)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:div\b)/i,/^(?:@)/i,/^(?:and\b)/i,/^(?:or\b)/i,/^(?:for\b)/i,/^(?:in\b)/i,/^(?:let\b)/i,/^(?:where\b)/i,/^(?:order by\b)/i,/^(?:return\b)/i,/^(?:to\b)/i,/^(?:if\b)/i,/^(?:then\b)/i,/^(?:else\b)/i,/^(?:declare\b)/i,/^(?:function\b)/i,/^(?:as\b)/i,/^(?:let\b)/i,/^(?:last\(\))/i,/^(?:position\(\))/i,/^(?:ancestor\b)/i,/^(?:attribute\b)/i,/^(?:self\b)/i,/^(?:child\b)/i,/^(?:descendant\b)/i,/^(?:following\b)/i,/^(?:sibling\b)/i,/^(?:namespace\b)/i,/^(?:parent\b)/i,/^(?:preceding\b)/i,/^(?:text\(\))/i,/^(?:node\(\))/i,/^(?:last\(\))/i,/^(?:position\(\))/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:([0-9]+))/i,/^(?:([a-zñA-ZÑ_][a-zñA-ZÑ0-9_]*))/i,/^(?:(("((\\([\'\"\\ntr]))|([^\"\\]+))*")))/i,/^(?:[\s\r\n\t])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = XQuery;
exports.Parser = XQuery.Parser;
exports.parse = function () { return XQuery.parse.apply(XQuery, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}