/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,5],$V2=[1,7],$V3=[1,8],$V4=[1,9],$V5=[1,10],$V6=[1,11],$V7=[1,12],$V8=[1,13],$V9=[1,14],$Va=[1,15],$Vb=[1,16],$Vc=[1,17],$Vd=[1,18],$Ve=[1,19],$Vf=[1,20],$Vg=[1,21],$Vh=[1,22],$Vi=[5,7,9,12,13,14,15,17,18,19,20,21,22,23,24,25,26,27,28],$Vj=[1,28],$Vk=[1,40],$Vl=[1,39],$Vm=[1,27],$Vn=[1,29],$Vo=[1,30],$Vp=[1,31],$Vq=[1,32],$Vr=[1,33],$Vs=[1,34],$Vt=[1,35],$Vu=[1,36],$Vv=[1,38],$Vw=[5,7,9,11,12,13,14,15,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,37,38,39,40,41,43,51,52,58],$Vx=[1,46],$Vy=[1,49],$Vz=[1,54],$VA=[1,48],$VB=[1,50],$VC=[1,51],$VD=[1,52],$VE=[1,53],$VF=[1,55],$VG=[1,56],$VH=[1,57],$VI=[1,58],$VJ=[1,59],$VK=[1,60],$VL=[2,55],$VM=[5,7,9,12,13,14,15,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,37,38,39,40,41,43,51,52,58],$VN=[5,7,9,12,13,14,15,17,18,19,20,21,22,23,24,25,26,27,28,30,35,43,51,52,58],$VO=[5,7,9,12,13,14,15,17,18,19,20,21,22,23,24,25,26,27,28,30,43,51,52,58],$VP=[5,7,9,12,13,14,15,17,18,19,20,21,22,23,24,25,26,27,28,30,32,33,34,35,37,38,39,40,41,43,51,52,58],$VQ=[5,7,9,12,13,14,15,17,18,19,20,21,22,23,24,25,26,27,28,30,35,37,38,39,40,41,43,51,52,58];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"instrucciones":4,"EOF":5,"instruccion":6,"BARRA":7,"e":8,"BARRABARRA":9,"RESERV":10,"DOSPUNTOS":11,"SIGNOO":12,"LAST":13,"POSITION":14,"ANCESTOR":15,"RESERVLARGE":16,"ATTRIBUTE":17,"ANCESORSELF":18,"CHILD":19,"DESCENDANT":20,"FOLLOWING":21,"NAMESPACE":22,"PARENT":23,"PRECENDING":24,"SELF":25,"TEXT":26,"NODE":27,"SIBLING":28,"MENOS":29,"OR":30,"MAS":31,"ASTERISCO":32,"DIV":33,"MODULO":34,"AND":35,"NOT":36,"MAYORQUE":37,"MAYORIGUAL":38,"MENORQUE":39,"MENORIGUAL":40,"DIFERENTE":41,"PARA":42,"PARC":43,"DECIMAL":44,"ENTERO":45,"CADENA":46,"CHAR":47,"TRUE":48,"FALSE":49,"ID":50,"INTERROGACION":51,"DSPNTS":52,"INCRE":53,"DECRE":54,"lista_exp":55,"SIM":56,"CORA":57,"CORC":58,"ARROBA":59,"IGUAL":60,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"BARRA",9:"BARRABARRA",11:"DOSPUNTOS",12:"SIGNOO",13:"LAST",14:"POSITION",15:"ANCESTOR",17:"ATTRIBUTE",18:"ANCESORSELF",19:"CHILD",20:"DESCENDANT",21:"FOLLOWING",22:"NAMESPACE",23:"PARENT",24:"PRECENDING",25:"SELF",26:"TEXT",27:"NODE",28:"SIBLING",29:"MENOS",30:"OR",31:"MAS",32:"ASTERISCO",33:"DIV",34:"MODULO",35:"AND",36:"NOT",37:"MAYORQUE",38:"MAYORIGUAL",39:"MENORQUE",40:"MENORIGUAL",41:"DIFERENTE",42:"PARA",43:"PARC",44:"DECIMAL",45:"ENTERO",46:"CADENA",47:"CHAR",48:"TRUE",49:"FALSE",50:"ID",51:"INTERROGACION",52:"DSPNTS",53:"INCRE",54:"DECRE",55:"lista_exp",57:"CORA",58:"CORC",59:"ARROBA",60:"IGUAL"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,3],[6,2],[6,4],[10,1],[10,1],[10,2],[10,1],[10,1],[10,1],[10,2],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[16,4],[16,2],[8,3],[8,3],[8,3],[8,3],[8,3],[8,3],[8,3],[8,2],[8,3],[8,3],[8,3],[8,3],[8,3],[8,2],[8,3],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,5],[8,2],[8,2],[8,3],[8,4],[8,1],[8,4],[8,1],[56,2],[56,4],[56,2],[56,1],[56,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 console.log($$[$0-1]); this.$= new ast.default($$[$0-1]);  return this.$; 
break;
case 2:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 3:
this.$= new Array(); this.$.push($$[$0]); 
break;
case 26:
this.$ = new aritmetica.default($$[$0-2], '+', $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false);
break;
case 27:
this.$ = new aritmetica.default($$[$0-2], '-', $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false);
break;
case 28:
this.$ = new aritmetica.default($$[$0-2], '*', $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false);
break;
case 29:
this.$ = new aritmetica.default($$[$0-2], '/', $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false);
break;
case 30:
this.$ = new aritmetica.default($$[$0-2], '%', $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false);
break;
case 31:
this.$ = new logica.default($$[$0-2], '&&', $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false);
break;
case 32:
this.$ = new logica.default($$[$0-2], 'OR', $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false);
break;
case 33: case 56:
this.$ = new logica.default($$[$0], '@', null, $$[$0-1].first_line, $$[$0-1].last_column, true);
break;
case 34:
this.$ = new relacional.default($$[$0-2],'>', $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false);
break;
case 35:
this.$ = new relacional.default($$[$0-2],'>=', $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false);
break;
case 36:
this.$ = new relacional.default($$[$0-2],'<', $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false);
break;
case 37:
this.$ = new relacional.default($$[$0-2],'<=', $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false);
break;
case 38:
this.$ = new relacional.default($$[$0-2],'!=', $$[$0], $$[$0-2].first_line, $$[$0-2].last_column, false);
break;
case 39:
this.$ = new aritmetica.default($$[$0], 'UNARIO', null, $$[$0-1].first_line, $$[$0-1].last_column, true);
break;
case 40:
this.$ = $$[$0-1];
break;
case 41: case 42:
this.$ = new primitivo.default(Number(yytext), $$[$0].first_line, $$[$0].last_column);
break;
case 43: case 44:
$$[$0] = $$[$0].slice(1, $$[$0].length-1); this.$ = new primitivo.default($$[$0], $$[$0].first_line, $$[$0].last_column);
break;
case 45:
this.$ = new primitivo.default(true, $$[$0].first_line, $$[$0].last_column);
break;
case 46:
this.$ = new primitivo.default(false, $$[$0].first_line, $$[$0].last_column);
break;
case 48:
this.$ = new ternario.default($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].last_column); 
break;
case 51:
 this.$ = new llamada.default($$[$0-2].toLowerCase() , [],_$[$0-2].first_line, _$[$0-2].last_column ); 
break;
case 52:
 this.$ = new llamada.default($$[$0-3].toLowerCase() , $$[$0-1] ,_$[$0-3].first_line, _$[$0-3].last_column ); 
break;
}
},
table: [{3:1,4:2,6:3,7:$V0,9:$V1,10:6,12:$V2,13:$V3,14:$V4,15:$V5,17:$V6,18:$V7,19:$V8,20:$V9,21:$Va,22:$Vb,23:$Vc,24:$Vd,25:$Ve,26:$Vf,27:$Vg,28:$Vh},{1:[3]},{5:[1,23],6:24,7:$V0,9:$V1,10:6,12:$V2,13:$V3,14:$V4,15:$V5,17:$V6,18:$V7,19:$V8,20:$V9,21:$Va,22:$Vb,23:$Vc,24:$Vd,25:$Ve,26:$Vf,27:$Vg,28:$Vh},o($Vi,[2,3]),{8:25,10:26,13:$V3,14:$V4,15:$V5,17:$V6,18:$V7,19:$V8,20:$V9,21:$Va,22:$Vb,23:$Vc,24:$Vd,25:$Ve,26:$Vf,27:$Vg,28:$Vh,29:$Vj,30:$Vk,32:$Vl,36:$Vm,42:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,56:37,59:$Vv},{8:41,10:42,13:$V3,14:$V4,15:$V5,17:$V6,18:$V7,19:$V8,20:$V9,21:$Va,22:$Vb,23:$Vc,24:$Vd,25:$Ve,26:$Vf,27:$Vg,28:$Vh,29:$Vj,30:$Vk,32:$Vl,36:$Vm,42:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,56:37,59:$Vv},{11:[1,43]},{6:44,7:$V0,9:$V1,10:6,12:$V2,13:$V3,14:$V4,15:$V5,17:$V6,18:$V7,19:$V8,20:$V9,21:$Va,22:$Vb,23:$Vc,24:$Vd,25:$Ve,26:$Vf,27:$Vg,28:$Vh},o($Vw,[2,9]),o($Vw,[2,10]),{16:45,29:$Vx},o($Vw,[2,12]),o($Vw,[2,13]),o($Vw,[2,14]),{16:47,29:$Vx},o($Vw,[2,16]),o($Vw,[2,17]),o($Vw,[2,18]),o($Vw,[2,19]),o($Vw,[2,20]),o($Vw,[2,21]),o($Vw,[2,22]),o($Vw,[2,23]),{1:[2,1]},o($Vi,[2,2]),o($Vi,[2,4],{29:$Vy,30:$Vz,31:$VA,32:$VB,33:$VC,34:$VD,35:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,51:$VK}),o([5,7,9,12,13,14,15,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,37,38,39,40,41,51],$VL,{11:[1,61]}),{8:62,10:42,13:$V3,14:$V4,15:$V5,17:$V6,18:$V7,19:$V8,20:$V9,21:$Va,22:$Vb,23:$Vc,24:$Vd,25:$Ve,26:$Vf,27:$Vg,28:$Vh,29:$Vj,30:$Vk,32:$Vl,36:$Vm,42:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,56:37,59:$Vv},{8:63,10:42,13:$V3,14:$V4,15:$V5,17:$V6,18:$V7,19:$V8,20:$V9,21:$Va,22:$Vb,23:$Vc,24:$Vd,25:$Ve,26:$Vf,27:$Vg,28:$Vh,29:$Vj,30:$Vk,32:$Vl,36:$Vm,42:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,56:37,59:$Vv},{8:64,10:42,13:$V3,14:$V4,15:$V5,17:$V6,18:$V7,19:$V8,20:$V9,21:$Va,22:$Vb,23:$Vc,24:$Vd,25:$Ve,26:$Vf,27:$Vg,28:$Vh,29:$Vj,30:$Vk,32:$Vl,36:$Vm,42:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,56:37,59:$Vv},o($VM,[2,41]),o($VM,[2,42]),o($VM,[2,43]),o($VM,[2,44]),o($VM,[2,45]),o($VM,[2,46]),o($VM,[2,47],{42:[1,67],53:[1,65],54:[1,66],57:[1,68]}),o($VM,[2,53]),{32:[1,70],50:[1,69]},o($VM,[2,59]),{8:71,10:42,13:$V3,14:$V4,15:$V5,17:$V6,18:$V7,19:$V8,20:$V9,21:$Va,22:$Vb,23:$Vc,24:$Vd,25:$Ve,26:$Vf,27:$Vg,28:$Vh,29:$Vj,30:$Vk,32:$Vl,36:$Vm,42:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,56:37,59:$Vv},o($Vi,[2,5],{29:$Vy,30:$Vz,31:$VA,32:$VB,33:$VC,34:$VD,35:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,51:$VK}),o($VM,$VL),{8:72,10:42,13:$V3,14:$V4,15:$V5,17:$V6,18:$V7,19:$V8,20:$V9,21:$Va,22:$Vb,23:$Vc,24:$Vd,25:$Ve,26:$Vf,27:$Vg,28:$Vh,29:$Vj,30:$Vk,32:$Vl,36:$Vm,42:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,56:37,59:$Vv},o($Vi,[2,7]),o($Vw,[2,11]),{28:[1,74],30:[1,73]},o($Vw,[2,15]),{8:75,10:42,13:$V3,14:$V4,15:$V5,17:$V6,18:$V7,19:$V8,20:$V9,21:$Va,22:$Vb,23:$Vc,24:$Vd,25:$Ve,26:$Vf,27:$Vg,28:$Vh,29:$Vj,30:$Vk,32:$Vl,36:$Vm,42:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,56:37,59:$Vv},{8:76,10:42,13:$V3,14:$V4,15:$V5,17:$V6,18:$V7,19:$V8,20:$V9,21:$Va,22:$Vb,23:$Vc,24:$Vd,25:$Ve,26:$Vf,27:$Vg,28:$Vh,29:$Vj,30:$Vk,32:$Vl,36:$Vm,42:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,56:37,59:$Vv},{8:77,10:42,13:$V3,14:$V4,15:$V5,17:$V6,18:$V7,19:$V8,20:$V9,21:$Va,22:$Vb,23:$Vc,24:$Vd,25:$Ve,26:$Vf,27:$Vg,28:$Vh,29:$Vj,30:$Vk,32:$Vl,36:$Vm,42:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,56:37,59:$Vv},{8:78,10:42,13:$V3,14:$V4,15:$V5,17:$V6,18:$V7,19:$V8,20:$V9,21:$Va,22:$Vb,23:$Vc,24:$Vd,25:$Ve,26:$Vf,27:$Vg,28:$Vh,29:$Vj,30:$Vk,32:$Vl,36:$Vm,42:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,56:37,59:$Vv},{8:79,10:42,13:$V3,14:$V4,15:$V5,17:$V6,18:$V7,19:$V8,20:$V9,21:$Va,22:$Vb,23:$Vc,24:$Vd,25:$Ve,26:$Vf,27:$Vg,28:$Vh,29:$Vj,30:$Vk,32:$Vl,36:$Vm,42:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,56:37,59:$Vv},{8:80,10:42,13:$V3,14:$V4,15:$V5,17:$V6,18:$V7,19:$V8,20:$V9,21:$Va,22:$Vb,23:$Vc,24:$Vd,25:$Ve,26:$Vf,27:$Vg,28:$Vh,29:$Vj,30:$Vk,32:$Vl,36:$Vm,42:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,56:37,59:$Vv},{8:81,10:42,13:$V3,14:$V4,15:$V5,17:$V6,18:$V7,19:$V8,20:$V9,21:$Va,22:$Vb,23:$Vc,24:$Vd,25:$Ve,26:$Vf,27:$Vg,28:$Vh,29:$Vj,30:$Vk,32:$Vl,36:$Vm,42:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,56:37,59:$Vv},{8:82,10:42,13:$V3,14:$V4,15:$V5,17:$V6,18:$V7,19:$V8,20:$V9,21:$Va,22:$Vb,23:$Vc,24:$Vd,25:$Ve,26:$Vf,27:$Vg,28:$Vh,29:$Vj,30:$Vk,32:$Vl,36:$Vm,42:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,56:37,59:$Vv},{8:83,10:42,13:$V3,14:$V4,15:$V5,17:$V6,18:$V7,19:$V8,20:$V9,21:$Va,22:$Vb,23:$Vc,24:$Vd,25:$Ve,26:$Vf,27:$Vg,28:$Vh,29:$Vj,30:$Vk,32:$Vl,36:$Vm,42:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,56:37,59:$Vv},{8:84,10:42,13:$V3,14:$V4,15:$V5,17:$V6,18:$V7,19:$V8,20:$V9,21:$Va,22:$Vb,23:$Vc,24:$Vd,25:$Ve,26:$Vf,27:$Vg,28:$Vh,29:$Vj,30:$Vk,32:$Vl,36:$Vm,42:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,56:37,59:$Vv},{8:85,10:42,13:$V3,14:$V4,15:$V5,17:$V6,18:$V7,19:$V8,20:$V9,21:$Va,22:$Vb,23:$Vc,24:$Vd,25:$Ve,26:$Vf,27:$Vg,28:$Vh,29:$Vj,30:$Vk,32:$Vl,36:$Vm,42:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,56:37,59:$Vv},{8:86,10:42,13:$V3,14:$V4,15:$V5,17:$V6,18:$V7,19:$V8,20:$V9,21:$Va,22:$Vb,23:$Vc,24:$Vd,25:$Ve,26:$Vf,27:$Vg,28:$Vh,29:$Vj,30:$Vk,32:$Vl,36:$Vm,42:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,56:37,59:$Vv},{8:87,10:42,13:$V3,14:$V4,15:$V5,17:$V6,18:$V7,19:$V8,20:$V9,21:$Va,22:$Vb,23:$Vc,24:$Vd,25:$Ve,26:$Vf,27:$Vg,28:$Vh,29:$Vj,30:$Vk,32:$Vl,36:$Vm,42:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,56:37,59:$Vv},{8:88,10:42,13:$V3,14:$V4,15:$V5,17:$V6,18:$V7,19:$V8,20:$V9,21:$Va,22:$Vb,23:$Vc,24:$Vd,25:$Ve,26:$Vf,27:$Vg,28:$Vh,29:$Vj,30:$Vk,32:$Vl,36:$Vm,42:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,56:37,59:$Vv},o($VN,[2,33],{29:$Vy,31:$VA,32:$VB,33:$VC,34:$VD,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ}),o($VM,[2,39]),{29:$Vy,30:$Vz,31:$VA,32:$VB,33:$VC,34:$VD,35:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,43:[1,89],51:$VK},o($VM,[2,49]),o($VM,[2,50]),{43:[1,90],55:[1,91]},{8:92,10:42,13:$V3,14:$V4,15:$V5,17:$V6,18:$V7,19:$V8,20:$V9,21:$Va,22:$Vb,23:$Vc,24:$Vd,25:$Ve,26:$Vf,27:$Vg,28:$Vh,29:$Vj,30:$Vk,32:$Vl,36:$Vm,42:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,56:37,59:$Vv},o($VM,[2,56],{60:[1,93]}),o($VM,[2,58]),o($VO,[2,60],{29:$Vy,31:$VA,32:$VB,33:$VC,34:$VD,35:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ}),o($Vi,[2,6],{29:$Vy,30:$Vz,31:$VA,32:$VB,33:$VC,34:$VD,35:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,51:$VK}),{29:[1,94]},o($Vw,[2,25]),o($VM,[2,26]),o($VM,[2,27]),o($VP,[2,28],{29:$Vy,31:$VA}),o($VP,[2,29],{29:$Vy,31:$VA}),o($VP,[2,30],{29:$Vy,31:$VA}),o($VN,[2,31],{29:$Vy,31:$VA,32:$VB,33:$VC,34:$VD,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ}),o($VO,[2,32],{29:$Vy,31:$VA,32:$VB,33:$VC,34:$VD,35:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ}),o($VQ,[2,34],{29:$Vy,31:$VA,32:$VB,33:$VC,34:$VD}),o($VQ,[2,35],{29:$Vy,31:$VA,32:$VB,33:$VC,34:$VD}),o($VQ,[2,36],{29:$Vy,31:$VA,32:$VB,33:$VC,34:$VD}),o($VQ,[2,37],{29:$Vy,31:$VA,32:$VB,33:$VC,34:$VD}),o($VQ,[2,38],{29:$Vy,31:$VA,32:$VB,33:$VC,34:$VD}),{29:$Vy,30:$Vz,31:$VA,32:$VB,33:$VC,34:$VD,35:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,51:$VK,52:[1,95]},o($Vi,[2,8],{29:$Vy,30:$Vz,31:$VA,32:$VB,33:$VC,34:$VD,35:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,51:$VK}),o($VM,[2,40]),o($VM,[2,51]),{43:[1,96]},{29:$Vy,30:$Vz,31:$VA,32:$VB,33:$VC,34:$VD,35:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,51:$VK,58:[1,97]},{46:[1,98]},{25:[1,99]},{8:100,10:42,13:$V3,14:$V4,15:$V5,17:$V6,18:$V7,19:$V8,20:$V9,21:$Va,22:$Vb,23:$Vc,24:$Vd,25:$Ve,26:$Vf,27:$Vg,28:$Vh,29:$Vj,30:$Vk,32:$Vl,36:$Vm,42:$Vn,44:$Vo,45:$Vp,46:$Vq,47:$Vr,48:$Vs,49:$Vt,50:$Vu,56:37,59:$Vv},o($VM,[2,52]),o($VM,[2,54]),o($VM,[2,57]),o($Vw,[2,24]),o([5,7,9,12,13,14,15,17,18,19,20,21,22,23,24,25,26,27,28,43,52,58],[2,48],{29:$Vy,30:$Vz,31:$VA,32:$VB,33:$VC,34:$VD,35:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,51:$VK})],
defaultActions: {23:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const evaluar = require('../Clases/Evaluar');
    const aritmetica= require('../Clases/Expreciones/Operaciones/Aritmetica');
    const relacional = require('../Clases/Expreciones/Operaciones/Relaciones');
    const logica = require('../Clases/Expreciones/Operaciones/Logicas');
    const primitivo= require('../Clases/Expreciones/Primitivo');
    const identificador= require('../Clases/Expreciones/Identificador');
    const ternario= require('../Clases/Expreciones/Ternario');

    const ast =require('../Clases/AST/Ast');
    const declaracion = require ('../Clases/Instrucciones/Declaracion');
    const asignacion = require ('../Clases/Instrucciones/Asignacion');
    const funcion = require ('../Clases/Instrucciones/Funcion');
    const llamada = require ('../Clases/Instrucciones/Llamada');
    const ejecutar = require ('../Clases/Instrucciones/Ejecutar');
    const Print = require ('../Clases/Instrucciones/Print');
    const Ifs = require ('../Clases/Instrucciones/SentenciaControl/Ifs');
    const While = require ('../Clases/Instrucciones/SentenciaCiclos/While');
    const dowhile =require ('../Clases/Instrucciones/SentenciaCiclos/DoWhile');
    const For =require ('../Clases/Instrucciones/SentenciaCiclos/For');
    const simbolo= require ('../Clases/TablaSimbolos/Simbolos');
    const tipo= require ('../Clases/TablaSimbolos/Tipo');

    const detener = require ('../Clases/Instrucciones/SentenciaTransferencia/Break');
    const continuar = require ('../Clases/Instrucciones/SentenciaTransferencia/continuar');
    const retornar = require ('../Clases/Instrucciones/SentenciaTransferencia/retornar');

    const sw = require ('../Clases/Instrucciones/SentenciaControl/SW');
    const cs = require ('../Clases/Instrucciones/SentenciaControl/CS');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: console.log("Reconocio : "+ yy_.yytext); return 42
break;
case 1: console.log("Reconocio : "+ yy_.yytext); return 9
break;
case 2: console.log("Reconocio : "+ yy_.yytext); return 7
break;
case 3: console.log("Reconocio : "+ yy_.yytext); return 43
break;
case 4: console.log("Reconocio : "+ yy_.yytext); return 57
break;
case 5: console.log("Reconocio : "+ yy_.yytext); return 58
break;
case 6: console.log("Reconocio : "+ yy_.yytext); return 59
break;
case 7: console.log("Reconocio : "+ yy_.yytext); return 'PUNTO'
break;
case 8: console.log("Reconocio : "+ yy_.yytext); return 'PUNTOPUNTO'
break;
case 9: console.log("Reconocio : "+ yy_.yytext); return 12
break;
case 10: console.log("Reconocio : "+ yy_.yytext); return 11
break;
case 11: console.log("Reconocio : "+ yy_.yytext); return 31
break;
case 12: console.log("Reconocio : "+ yy_.yytext); return 29
break;
case 13: console.log("Reconocio : "+ yy_.yytext); return 32
break;
case 14: console.log("Reconocio : "+ yy_.yytext); return 33
break;
case 15: console.log("Reconocio : "+ yy_.yytext); return 34
break;
case 16: console.log("Reconocio : "+ yy_.yytext); return 60
break;
case 17: console.log("Reconocio : "+ yy_.yytext); return 40
break;
case 18: console.log("Reconocio : "+ yy_.yytext); return 39
break;
case 19: console.log("Reconocio : "+ yy_.yytext); return 38
break;
case 20: console.log("Reconocio : "+ yy_.yytext); return 37
break;
case 21: console.log("Reconocio : "+ yy_.yytext); return 41
break;
case 22: console.log("Reconocio : "+ yy_.yytext); return 35
break;
case 23: console.log("Reconocio : "+ yy_.yytext); return 30
break;
case 24: console.log("Reconocio : "+ yy_.yytext); return 13
break;
case 25: console.log("Reconocio : "+ yy_.yytext); return 14
break;
case 26: console.log("Reconocio : "+ yy_.yytext); return 15
break;
case 27: console.log("Reconocio : "+ yy_.yytext); return 17
break;
case 28: console.log("Reconocio : "+ yy_.yytext); return 25
break;
case 29: console.log("Reconocio : "+ yy_.yytext); return 19
break;
case 30: console.log("Reconocio : "+ yy_.yytext); return 20
break;
case 31: console.log("Reconocio : "+ yy_.yytext); return 21
break;
case 32: console.log("Reconocio : "+ yy_.yytext); return 28
break;
case 33: console.log("Reconocio : "+ yy_.yytext); return 22
break;
case 34: console.log("Reconocio : "+ yy_.yytext); return 23
break;
case 35: console.log("Reconocio : "+ yy_.yytext); return 24
break;
case 36: console.log("Reconocio : "+ yy_.yytext); return 26
break;
case 37: console.log("Reconocio : "+ yy_.yytext); return 27
break;
case 38: console.log("Reconocio : "+ yy_.yytext); return 44
break;
case 39: console.log("Reconocio : "+ yy_.yytext); return 45
break;
case 40: console.log("Reconocio : "+ yy_.yytext); return 50
break;
case 41: console.log("Reconocio : "+ yy_.yytext); return 46
break;
case 42: /* skip whitespace */ 
break;
case 43:return 5
break;
case 44: console.log("Error Lexico "+yy_.yytext
                        +" linea "+yy_.yylineno
                        +" columna "+(yy_.yylloc.last_column+1));
                                      
                        
break;
}
},
rules: [/^(?:\()/i,/^(?:\/\/)/i,/^(?:\/)/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:@)/i,/^(?:\.)/i,/^(?:\.\.)/i,/^(?:\|)/i,/^(?:::)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:div\b)/i,/^(?:mod\b)/i,/^(?:=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:and\b)/i,/^(?:or\b)/i,/^(?:last\(\))/i,/^(?:position\(\))/i,/^(?:ancestor\b)/i,/^(?:attribute\b)/i,/^(?:self\b)/i,/^(?:child\b)/i,/^(?:descendant\b)/i,/^(?:following\b)/i,/^(?:sibling\b)/i,/^(?:namespace\b)/i,/^(?:parent\b)/i,/^(?:preceding\b)/i,/^(?:text\(\))/i,/^(?:node\(\))/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:([0-9]+))/i,/^(?:([a-zñA-ZÑ_][a-zñA-ZÑ0-9_]*))/i,/^(?:(("((\\([\'\"\\ntr]))|([^\"\\]+))*")))/i,/^(?:[\s\r\n\t])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}